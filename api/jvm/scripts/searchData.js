pages = [{"l":"index.html","n":"root","t":"root","d":"","k":"static"},
{"l":"cps.html","n":"cps","t":"package cps","d":"cps","k":"package"},
{"l":"cps.html","n":"async","t":"def async[F[_]](using am: CpsMonad[F]): InferAsyncArg[F, Context]","d":"cps","k":"def"},
{"l":"cps.html","n":"asyncStream","t":"def asyncStream[R](using a: CpsAsyncEmitAbsorber[R]): AsyncStreamHelper[R, Monad, Context, Element]","d":"cps","k":"def"},
{"l":"cps.html","n":"await","t":"def await[F[_], T, G[_]](f: F[T])(using am: CpsAwaitable[F], ctx: CpsMonadContext[G]): T","d":"cps","k":"def"},
{"l":"cps.html","n":"customValueDiscard","t":"given customValueDiscard: customValueDiscard.type","d":"cps","k":"given"},
{"l":"cps.html","n":"warnValueDiscard","t":"given warnValueDiscard: warnValueDiscard.type","d":"cps","k":"given"},
{"l":"cps/AsyncShift.html","n":"AsyncShift","t":"trait AsyncShift[T]","d":"cps/AsyncShift","k":"trait"},
{"l":"cps/AsyncShift$.html","n":"AsyncShift","t":"object AsyncShift","d":"cps/AsyncShift$","k":"object"},
{"l":"cps/AsyncShift$.html","n":"shiftedArrayOps","t":"given shiftedArrayOps[A]: AsyncShift[ArrayOps[A]]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedCpsMonad","t":"given shiftedCpsMonad[F[_], M <: CpsMonad[F]](using CpsMonad[F]): AsyncShift[M]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedEither","t":"given shiftedEither[A, B]: AsyncShift[Either[A, B]]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedEitherLeftProjection","t":"given shiftedEitherLeftProjection[A, B]: AsyncShift[LeftProjection[A, B]]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedFunction1","t":"given shiftedFunction1[A, B]: AsyncShift[A => B]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedImmutableMapOps","t":"given shiftedImmutableMapOps[K, V, CC <: ([K, V] =>> MapOps[K, V, LazyRef(...), LazyRef(...)] & Iterable[(K, V)])]: AsyncShift[CC[K, V]]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedIndexedSeqOps","t":"given shiftedIndexedSeqOps[A, C <: ([X] =>> IndexedSeq[X] & IndexedSeqOps[X, LazyRef(...), LazyRef(...)])]: AsyncShift[C[A]]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedIterable","t":"given shiftedIterable[A, CA <: Iterable[A]]: AsyncShift[CA]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedIterableOps","t":"given shiftedIterableOps[A, C <: ([X] =>> Iterable[X] & IterableOps[X, LazyRef(...), LazyRef(...)])]: AsyncShift[C[A]]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedList","t":"given shiftedList[A]: AsyncShift[List[A]]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedMapOps","t":"given shiftedMapOps[K, V, CC <: ([K, V] =>> MapOps[K, V, LazyRef(...), LazyRef(...)] & Iterable[(K, V)])]: AsyncShift[CC[K, V]]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedOption","t":"given shiftedOption[A]: AsyncShift[Option[A]]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedPartialFunction","t":"given shiftedPartialFunction[A, B]: AsyncShift[PartialFunction[A, B]]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedRange","t":"given shiftedRange[CA <: Range]: AsyncShift[CA]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedSeqOps","t":"given shiftedSeqOps[A, C <: ([X] =>> Seq[X] & SeqOps[X, LazyRef(...), LazyRef(...)])]: AsyncShift[C[A]]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedTry","t":"given shiftedTry[A]: AsyncShift[Try[A]]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedTryModule","t":"given shiftedTryModule: AsyncShift[Try.type]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AsyncShift$.html","n":"shiftedUsing","t":"given shiftedUsing: AsyncShift[Using.type]","d":"cps/AsyncShift$","k":"given"},
{"l":"cps/AwaitValueDiscard.html","n":"AwaitValueDiscard","t":"class AwaitValueDiscard[F[_], T] extends ValueDiscard[F[T]]","d":"cps/AwaitValueDiscard","k":"class"},
{"l":"cps/AwaitValueDiscard.html","n":"FT","t":"type FT = F[T]","d":"cps/AwaitValueDiscard","k":"type"},
{"l":"cps/AwaitValueDiscard.html","n":"TT","t":"type TT = T","d":"cps/AwaitValueDiscard","k":"type"},
{"l":"cps/CpsAsyncEffectMonad.html","n":"CpsAsyncEffectMonad","t":"trait CpsAsyncEffectMonad[F[_]] extends CpsAsyncMonad[F] with CpsEffectMonad[F]","d":"cps/CpsAsyncEffectMonad","k":"trait"},
{"l":"cps/CpsAsyncMonad.html","n":"CpsAsyncMonad","t":"trait CpsAsyncMonad[F[_]] extends CpsTryMonad[F]","d":"cps/CpsAsyncMonad","k":"trait"},
{"l":"cps/CpsAsyncMonad.html","n":"adoptCallbackStyle","t":"def adoptCallbackStyle[A](source: Try[A] => Unit => Unit): F[A]","d":"cps/CpsAsyncMonad","k":"def"},
{"l":"cps/CpsAsyncMonad$.html","n":"CpsAsyncMonad","t":"object CpsAsyncMonad","d":"cps/CpsAsyncMonad$","k":"object"},
{"l":"cps/CpsAsyncMonad$.html","n":"Aux","t":"type Aux[F[_], C <: CpsMonadContext[F]] = CpsAsyncMonad[F] { type Context = C;  }","d":"cps/CpsAsyncMonad$","k":"type"},
{"l":"cps/CpsAwaitable.html","n":"CpsAwaitable","t":"trait CpsAwaitable[F[_]]","d":"cps/CpsAwaitable","k":"trait"},
{"l":"cps/CpsConcurrentEffectMonad.html","n":"CpsConcurrentEffectMonad","t":"trait CpsConcurrentEffectMonad[F[_]] extends CpsConcurrentMonad[F] with CpsAsyncEffectMonad[F]","d":"cps/CpsConcurrentEffectMonad","k":"trait"},
{"l":"cps/CpsConcurrentMonad.html","n":"CpsConcurrentMonad","t":"trait CpsConcurrentMonad[F[_]] extends CpsAsyncMonad[F]","d":"cps/CpsConcurrentMonad","k":"trait"},
{"l":"cps/CpsConcurrentMonad.html","n":"Spawned","t":"type Spawned[A]","d":"cps/CpsConcurrentMonad","k":"type"},
{"l":"cps/CpsConcurrentMonad.html","n":"concurrently","t":"def concurrently[A, B](fa: F[A], fb: F[B]): F[Either[(Try[A], Spawned[B]), (Spawned[A], Try[B])]]","d":"cps/CpsConcurrentMonad","k":"def"},
{"l":"cps/CpsConcurrentMonad.html","n":"join","t":"def join[A](op: Spawned[A]): F[A]","d":"cps/CpsConcurrentMonad","k":"def"},
{"l":"cps/CpsConcurrentMonad.html","n":"spawnEffect","t":"def spawnEffect[A](op: => F[A]): F[Spawned[A]]","d":"cps/CpsConcurrentMonad","k":"def"},
{"l":"cps/CpsConcurrentMonad.html","n":"tryCancel","t":"def tryCancel[A](op: Spawned[A]): F[Unit]","d":"cps/CpsConcurrentMonad","k":"def"},
{"l":"cps/CpsConcurrentMonad$.html","n":"CpsConcurrentMonad","t":"object CpsConcurrentMonad","d":"cps/CpsConcurrentMonad$","k":"object"},
{"l":"cps/CpsConcurrentMonad$.html","n":"Aux","t":"type Aux[F[_], C <: CpsMonadContext[F]] = CpsConcurrentMonad[F] { type Context = C;  }","d":"cps/CpsConcurrentMonad$","k":"type"},
{"l":"cps/CpsContextMonad.html","n":"CpsContextMonad","t":"trait CpsContextMonad[F[_], Ctx <: CpsMonadContext[F]] extends CpsMonad[F]","d":"cps/CpsContextMonad","k":"trait"},
{"l":"cps/CpsContextMonad.html","n":"Context","t":"type Context = Ctx","d":"cps/CpsContextMonad","k":"type"},
{"l":"cps/CpsContextMonad.html","n":"apply","t":"def apply[T](op: Context => F[T]): F[T]","d":"cps/CpsContextMonad","k":"def"},
{"l":"cps/CpsContextMonad.html","n":"applyContext","t":"def applyContext[T](op: Ctx => F[T]): F[T]","d":"cps/CpsContextMonad","k":"def"},
{"l":"cps/CpsEffectMonad.html","n":"CpsEffectMonad","t":"trait CpsEffectMonad[F[_]] extends CpsMonad[F]","d":"cps/CpsEffectMonad","k":"trait"},
{"l":"cps/CpsEffectMonad.html","n":"delay","t":"def delay[T](x: => T): F[T]","d":"cps/CpsEffectMonad","k":"def"},
{"l":"cps/CpsEffectMonad.html","n":"delayedUnit","t":"def delayedUnit: F[Unit]","d":"cps/CpsEffectMonad","k":"def"},
{"l":"cps/CpsEffectMonad.html","n":"flatDelay","t":"def flatDelay[T](x: => F[T]): F[T]","d":"cps/CpsEffectMonad","k":"def"},
{"l":"cps/CpsMonad.html","n":"CpsMonad","t":"trait CpsMonad[F[_]] extends CpsAwaitable[F]","d":"cps/CpsMonad","k":"trait"},
{"l":"cps/CpsMonad.html","n":"Context","t":"type Context <: CpsMonadContext[F]","d":"cps/CpsMonad","k":"type"},
{"l":"cps/CpsMonad.html","n":"WF","t":"type WF[X] = F[X]","d":"cps/CpsMonad","k":"type"},
{"l":"cps/CpsMonad.html","n":"apply","t":"def apply[T](op: Context => F[T]): F[T]","d":"cps/CpsMonad","k":"def"},
{"l":"cps/CpsMonad.html","n":"flatMap","t":"def flatMap[A, B](fa: F[A])(f: A => F[B]): F[B]","d":"cps/CpsMonad","k":"def"},
{"l":"cps/CpsMonad.html","n":"map","t":"def map[A, B](fa: F[A])(f: A => B): F[B]","d":"cps/CpsMonad","k":"def"},
{"l":"cps/CpsMonad.html","n":"pure","t":"def pure[T](t: T): F[T]","d":"cps/CpsMonad","k":"def"},
{"l":"cps/CpsMonad$.html","n":"CpsMonad","t":"object CpsMonad","d":"cps/CpsMonad$","k":"object"},
{"l":"cps/CpsMonad$.html","n":"Aux","t":"type Aux[F[_], C <: CpsMonadContext[F]] = CpsMonad[F] { type Context = C;  }","d":"cps/CpsMonad$","k":"type"},
{"l":"cps/CpsMonadContext.html","n":"CpsMonadContext","t":"trait CpsMonadContext[F[_]]","d":"cps/CpsMonadContext","k":"trait"},
{"l":"cps/CpsMonadContext.html","n":"Monad","t":"type Monad[X] = F[X]","d":"cps/CpsMonadContext","k":"type"},
{"l":"cps/CpsMonadContext.html","n":"adoptAwait","t":"def adoptAwait[A](fa: F[A]): F[A]","d":"cps/CpsMonadContext","k":"def"},
{"l":"cps/CpsMonadContextProvider.html","n":"CpsMonadContextProvider","t":"trait CpsMonadContextProvider[F[_]]","d":"cps/CpsMonadContextProvider","k":"trait"},
{"l":"cps/CpsMonadContextProvider.html","n":"Context","t":"type Context <: CpsMonadContext[F]","d":"cps/CpsMonadContextProvider","k":"type"},
{"l":"cps/CpsMonadContextProvider.html","n":"contextualize","t":"def contextualize[A](fa: Context => F[A]): F[A]","d":"cps/CpsMonadContextProvider","k":"def"},
{"l":"cps/CpsMonadConversion.html","n":"CpsMonadConversion","t":"trait CpsMonadConversion[F[_], G[_]]","d":"cps/CpsMonadConversion","k":"trait"},
{"l":"cps/CpsMonadConversion.html","n":"apply","t":"def apply[T](ft: F[T]): G[T]","d":"cps/CpsMonadConversion","k":"def"},
{"l":"cps/CpsMonadInstanceContext.html","n":"CpsMonadInstanceContext","t":"trait CpsMonadInstanceContext[F[_]] extends CpsMonad[F] with CpsMonadContext[F]","d":"cps/CpsMonadInstanceContext","k":"trait"},
{"l":"cps/CpsMonadInstanceContext.html","n":"Context","t":"type Context = CpsMonadInstanceContext[F]","d":"cps/CpsMonadInstanceContext","k":"type"},
{"l":"cps/CpsMonadInstanceContext.html","n":"adoptAwait","t":"def adoptAwait[A](fa: F[A]): F[A]","d":"cps/CpsMonadInstanceContext","k":"def"},
{"l":"cps/CpsMonadInstanceContext.html","n":"apply","t":"def apply[T](op: Context => F[T]): F[T]","d":"cps/CpsMonadInstanceContext","k":"def"},
{"l":"cps/CpsMonadMemoization.html","n":"CpsMonadMemoization","t":"trait CpsMonadMemoization[F[_]]","d":"cps/CpsMonadMemoization","k":"trait"},
{"l":"cps/CpsMonadMemoization$.html","n":"CpsMonadMemoization","t":"object CpsMonadMemoization","d":"cps/CpsMonadMemoization$","k":"object"},
{"l":"cps/CpsMonadMemoization$$Default.html","n":"Default","t":"class Default[F[_]] extends Inplace[F]","d":"cps/CpsMonadMemoization$$Default","k":"class"},
{"l":"cps/CpsMonadMemoization$$Default.html","n":"apply","t":"def apply[T](ft: F[T]): F[T]","d":"cps/CpsMonadMemoization$$Default","k":"def"},
{"l":"cps/CpsMonadMemoization$$Dynamic.html","n":"Dynamic","t":"trait Dynamic[F[_]] extends CpsMonadMemoization[F]","d":"cps/CpsMonadMemoization$$Dynamic","k":"trait"},
{"l":"cps/CpsMonadMemoization$$DynamicAp.html","n":"DynamicAp","t":"trait DynamicAp[F[_], T, FT]","d":"cps/CpsMonadMemoization$$DynamicAp","k":"trait"},
{"l":"cps/CpsMonadMemoization$$DynamicAp.html","n":"apply","t":"def apply(ft: FT): F[FT]","d":"cps/CpsMonadMemoization$$DynamicAp","k":"def"},
{"l":"cps/CpsMonadMemoization$$Inplace$.html","n":"Inplace","t":"object Inplace","d":"cps/CpsMonadMemoization$$Inplace$","k":"object"},
{"l":"cps/CpsMonadMemoization$$Inplace$.html","n":"run","t":"def run[F[_], E, T](mm: Inplace[F], value: E): E","d":"cps/CpsMonadMemoization$$Inplace$","k":"def"},
{"l":"cps/CpsMonadMemoization$$Inplace.html","n":"Inplace","t":"trait Inplace[F[_]] extends CpsMonadMemoization[F]","d":"cps/CpsMonadMemoization$$Inplace","k":"trait"},
{"l":"cps/CpsMonadMemoization$$Inplace.html","n":"apply","t":"def apply[T](ft: F[T]): F[T]","d":"cps/CpsMonadMemoization$$Inplace","k":"def"},
{"l":"cps/CpsMonadMemoization$$Kind.html","n":"Kind","t":"enum Kind","d":"cps/CpsMonadMemoization$$Kind","k":"enum"},
{"l":"cps/CpsMonadMemoization$$Kind.html","n":"BY_DEFAULT","t":"case BY_DEFAULT extends Kind","d":"cps/CpsMonadMemoization$$Kind","k":"case"},
{"l":"cps/CpsMonadMemoization$$Kind.html","n":"INPLACE","t":"case INPLACE extends Kind","d":"cps/CpsMonadMemoization$$Kind","k":"case"},
{"l":"cps/CpsMonadMemoization$$Kind.html","n":"PURE","t":"case PURE extends Kind","d":"cps/CpsMonadMemoization$$Kind","k":"case"},
{"l":"cps/CpsMonadMemoization$$Kind.html","n":"DYNAMIC","t":"case DYNAMIC extends Kind","d":"cps/CpsMonadMemoization$$Kind","k":"case"},
{"l":"cps/CpsMonadMemoization$$Pure.html","n":"Pure","t":"trait Pure[F[_]] extends CpsMonadMemoization[F]","d":"cps/CpsMonadMemoization$$Pure","k":"trait"},
{"l":"cps/CpsMonadMemoization$$Pure.html","n":"apply","t":"def apply[T](ft: F[T]): F[F[T]]","d":"cps/CpsMonadMemoization$$Pure","k":"def"},
{"l":"cps/CpsSchedulingMonad.html","n":"CpsSchedulingMonad","t":"trait CpsSchedulingMonad[F[_]] extends CpsConcurrentMonad[F]","d":"cps/CpsSchedulingMonad","k":"trait"},
{"l":"cps/CpsSchedulingMonad.html","n":"Spawned","t":"type Spawned[A] = F[A]","d":"cps/CpsSchedulingMonad","k":"type"},
{"l":"cps/CpsSchedulingMonad.html","n":"join","t":"def join[A](op: F[A]): F[A]","d":"cps/CpsSchedulingMonad","k":"def"},
{"l":"cps/CpsSchedulingMonad.html","n":"spawn","t":"def spawn[A](op: => F[A]): F[A]","d":"cps/CpsSchedulingMonad","k":"def"},
{"l":"cps/CpsSchedulingMonad.html","n":"spawnEffect","t":"def spawnEffect[A](op: => F[A]): F[F[A]]","d":"cps/CpsSchedulingMonad","k":"def"},
{"l":"cps/CpsTryMonad.html","n":"CpsTryMonad","t":"trait CpsTryMonad[F[_]] extends CpsMonad[F]","d":"cps/CpsTryMonad","k":"trait"},
{"l":"cps/CpsTryMonad.html","n":"error","t":"def error[A](e: Throwable): F[A]","d":"cps/CpsTryMonad","k":"def"},
{"l":"cps/CpsTryMonad.html","n":"flatMapTry","t":"def flatMapTry[A, B](fa: F[A])(f: Try[A] => F[B]): F[B]","d":"cps/CpsTryMonad","k":"def"},
{"l":"cps/CpsTryMonad.html","n":"fromTry","t":"def fromTry[A](r: Try[A]): F[A]","d":"cps/CpsTryMonad","k":"def"},
{"l":"cps/CpsTryMonad.html","n":"mapTry","t":"def mapTry[A, B](fa: F[A])(f: Try[A] => B): F[B]","d":"cps/CpsTryMonad","k":"def"},
{"l":"cps/CpsTryMonad.html","n":"mapTryAsync","t":"def mapTryAsync[A, B](fa: F[A])(f: Try[A] => F[B]): F[B]","d":"cps/CpsTryMonad","k":"def"},
{"l":"cps/CpsTryMonad.html","n":"restore","t":"def restore[A](fa: F[A])(fx: Throwable => F[A]): F[A]","d":"cps/CpsTryMonad","k":"def"},
{"l":"cps/CpsTryMonad.html","n":"tryImpure","t":"def tryImpure[A](a: => F[A]): F[A]","d":"cps/CpsTryMonad","k":"def"},
{"l":"cps/CpsTryMonad.html","n":"tryPure","t":"def tryPure[A](a: => A): F[A]","d":"cps/CpsTryMonad","k":"def"},
{"l":"cps/CpsTryMonad.html","n":"tryPureAsync","t":"def tryPureAsync[A](a: () => F[A]): F[A]","d":"cps/CpsTryMonad","k":"def"},
{"l":"cps/CpsTryMonad.html","n":"withAction","t":"def withAction[A](fa: F[A])(action: => Unit): F[A]","d":"cps/CpsTryMonad","k":"def"},
{"l":"cps/CpsTryMonad.html","n":"withActionAsync","t":"def withActionAsync[A](fa: F[A])(action: () => F[Unit]): F[A]","d":"cps/CpsTryMonad","k":"def"},
{"l":"cps/CpsTryMonad.html","n":"withAsyncAction","t":"def withAsyncAction[A](fa: F[A])(action: => F[Unit]): F[A]","d":"cps/CpsTryMonad","k":"def"},
{"l":"cps/CpsTryMonad$.html","n":"CpsTryMonad","t":"object CpsTryMonad","d":"cps/CpsTryMonad$","k":"object"},
{"l":"cps/CpsTryMonad$.html","n":"Aux","t":"type Aux[F[_], C <: CpsMonadContext[F]] = CpsTryMonad[F] { type Context = C;  }","d":"cps/CpsTryMonad$","k":"type"},
{"l":"cps/ValueDiscard.html","n":"ValueDiscard","t":"trait ValueDiscard[T]","d":"cps/ValueDiscard","k":"trait"},
{"l":"cps/ValueDiscard.html","n":"apply","t":"def apply(value: T): Unit","d":"cps/ValueDiscard","k":"def"},
{"l":"cps/ValueDiscard$.html","n":"ValueDiscard","t":"object ValueDiscard","d":"cps/ValueDiscard$","k":"object"},
{"l":"cps/ValueDiscard$.html","n":"booleanValueDiscard","t":"given booleanValueDiscard: ValueDiscard[Boolean]","d":"cps/ValueDiscard$","k":"given"},
{"l":"cps/ValueDiscard$.html","n":"intValueDiscard","t":"given intValueDiscard: ValueDiscard[Int]","d":"cps/ValueDiscard$","k":"given"},
{"l":"cps/ValueDiscard$.html","n":"longValueDiscard","t":"given longValueDiscard: ValueDiscard[Long]","d":"cps/ValueDiscard$","k":"given"},
{"l":"cps/ValueDiscard$.html","n":"stringValueDiscard","t":"given stringValueDiscard: ValueDiscard[String]","d":"cps/ValueDiscard$","k":"given"},
{"l":"cps/ValueDiscard$$CustomTag.html","n":"CustomTag","t":"class CustomTag","d":"cps/ValueDiscard$$CustomTag","k":"class"},
{"l":"cps/ValueDiscard$$EmptyValueDiscard.html","n":"EmptyValueDiscard","t":"class EmptyValueDiscard[T] extends ValueDiscard[T]","d":"cps/ValueDiscard$$EmptyValueDiscard","k":"class"},
{"l":"cps/ValueDiscard$$WarnTag.html","n":"WarnTag","t":"class WarnTag","d":"cps/ValueDiscard$$WarnTag","k":"class"},
{"l":"cps/customValueDiscard$.html","n":"customValueDiscard","t":"object customValueDiscard extends CustomTag","d":"cps/customValueDiscard$","k":"object"},
{"l":"cps/warnValueDiscard$.html","n":"warnValueDiscard","t":"object warnValueDiscard extends WarnTag","d":"cps/warnValueDiscard$","k":"object"},
{"l":"cps/automaticColoring.html","n":"cps.automaticColoring","t":"package cps.automaticColoring","d":"cps/automaticColoring","k":"package"},
{"l":"cps/automaticColoring.html","n":"conversion","t":"given conversion[F[_], T, G[_]](using CpsAwaitable[F], CpsMonadMemoization[F], AutomaticColoringTag[F], CpsMonadContext[G]): Conversion[F[T], T]","d":"cps/automaticColoring","k":"given"},
{"l":"cps/automaticColoring.html","n":"tag","t":"given tag[F[_]]: tag[F]","d":"cps/automaticColoring","k":"given"},
{"l":"cps/automaticColoring/AutomaticColoringTag.html","n":"AutomaticColoringTag","t":"trait AutomaticColoringTag[F[_]]","d":"cps/automaticColoring/AutomaticColoringTag","k":"trait"},
{"l":"cps/automaticColoring/WarnValueDiscard.html","n":"WarnValueDiscard","t":"trait WarnValueDiscard[F[_]]","d":"cps/automaticColoring/WarnValueDiscard","k":"trait"},
{"l":"cps/compat.html","n":"cps.compat","t":"package cps.compat","d":"cps/compat","k":"package"},
{"l":"cps/compat.html","n":"sip22","t":"val sip22: FutureAsync.type","d":"cps/compat","k":"val"},
{"l":"cps/compat/FutureAsync$.html","n":"FutureAsync","t":"object FutureAsync","d":"cps/compat/FutureAsync$","k":"object"},
{"l":"cps/compat/FutureAsync$.html","n":"async","t":"def async[T](inline x: T)(using ec: ExecutionContext): Future[T]","d":"cps/compat/FutureAsync$","k":"def"},
{"l":"cps/compat/FutureAsync$.html","n":"await","t":"def await[T](x: Future[T])(using ec: ExecutionContext): T","d":"cps/compat/FutureAsync$","k":"def"},
{"l":"cps/macros.html","n":"cps.macros","t":"package cps.macros","d":"cps/macros","k":"package"},
{"l":"cps/macros.html","n":"given_FromExpr_AsyncMacroFlags","t":"given given_FromExpr_AsyncMacroFlags: given_FromExpr_AsyncMacroFlags.type","d":"cps/macros","k":"given"},
{"l":"cps/macros/Async$.html","n":"Async","t":"object Async","d":"cps/macros/Async$","k":"object"},
{"l":"cps/macros/Async$.html","n":"adoptFlags","t":"def adoptFlags[F[_] : Type, T](f: Expr[T], dm: Expr[CpsMonad[F]])(implicit evidence$7: Type[F], Quotes): AsyncMacroFlags","d":"cps/macros/Async$","k":"def"},
{"l":"cps/macros/Async$.html","n":"async","t":"def async[F[_]](using am: CpsMonad[F]): InferAsyncArg[F, Context]","d":"cps/macros/Async$","k":"def"},
{"l":"cps/macros/Async$.html","n":"nestTransform","t":"def nestTransform[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type, S : Type](f: Expr[S], cpsCtx: TransformationContext[F, T, C])(implicit evidence$13: Type[F], evidence$14: Type[T], evidence$15: Type[C], evidence$16: Type[S], Quotes): CpsExpr[F, S]","d":"cps/macros/Async$","k":"def"},
{"l":"cps/macros/Async$.html","n":"resolveMemoization","t":"def resolveMemoization[F[_] : Type, T : Type](f: Expr[T], dm: Expr[CpsMonad[F]])(implicit evidence$8: Type[F], evidence$9: Type[T], Quotes): Memoization[F]","d":"cps/macros/Async$","k":"def"},
{"l":"cps/macros/Async$.html","n":"rootTransform","t":"def rootTransform[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](f: Expr[T], dm: Expr[CpsMonad[F]], mc: Expr[C], optMemoization: Option[Memoization[F]], flags: AsyncMacroFlags, observatory: Observatory, nesting: Int, parent: Option[TransformationContext[_[_], _, _]])(implicit evidence$10: Type[F], evidence$11: Type[T], evidence$12: Type[C], Quotes): CpsExpr[F, T]","d":"cps/macros/Async$","k":"def"},
{"l":"cps/macros/Async$.html","n":"transform","t":"def transform[F[_], T, C <: CpsMonadContext[F]](inline expr: T, inline ctx: C)(using m: CpsMonad[F]): F[T]","d":"cps/macros/Async$","k":"def"},
{"l":"cps/macros/Async$.html","n":"transformContextInstanceMonad","t":"def transformContextInstanceMonad[F[_] : Type, T : Type, C <: CpsMonadInstanceContext[F] : Type](f: Expr[T], dm: Expr[C])(implicit evidence$20: Type[F], evidence$21: Type[T], evidence$22: Type[C], Quotes): Expr[F[T]]","d":"cps/macros/Async$","k":"def"},
{"l":"cps/macros/Async$.html","n":"transformContextLambda","t":"def transformContextLambda[F[_], T, C <: CpsMonadContext[F]](inline expr: C => T)(using m: CpsMonad[F]): C => F[T]","d":"cps/macros/Async$","k":"def"},
{"l":"cps/macros/Async$.html","n":"transformContextLambdaImpl","t":"def transformContextLambdaImpl[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](cexpr: Expr[C => T])(implicit evidence$17: Type[F], evidence$18: Type[T], evidence$19: Type[C], Quotes): Expr[C => F[T]]","d":"cps/macros/Async$","k":"def"},
{"l":"cps/macros/Async$.html","n":"transformImpl","t":"def transformImpl[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](f: Expr[T], c: Expr[C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C], Quotes): Expr[F[T]]","d":"cps/macros/Async$","k":"def"},
{"l":"cps/macros/Async$.html","n":"transformMonad","t":"def transformMonad[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](f: Expr[T], dm: Expr[CpsMonad[F]], mc: Expr[C])(implicit evidence$4: Type[F], evidence$5: Type[T], evidence$6: Type[C], Quotes): Expr[F[T]]","d":"cps/macros/Async$","k":"def"},
{"l":"cps/macros/Async$$InferAsyncArg.html","n":"InferAsyncArg","t":"class InferAsyncArg[F[_], C <: CpsMonadContext[F]](using val am: Aux[F, C])","d":"cps/macros/Async$$InferAsyncArg","k":"class"},
{"l":"cps/macros/Async$$InferAsyncArg.html","n":"am","t":"given am: Aux[F, C]","d":"cps/macros/Async$$InferAsyncArg","k":"given"},
{"l":"cps/macros/Async$$InferAsyncArg.html","n":"apply","t":"def apply[T](inline expr: C => T): F[T]","d":"cps/macros/Async$$InferAsyncArg","k":"def"},
{"l":"cps/macros/Async$$InferAsyncArg.html","n":"in","t":"def in[T](using mc: CpsMonadContextProvider[F])(inline expr: Context => T): F[T]","d":"cps/macros/Async$$InferAsyncArg","k":"def"},
{"l":"cps/macros/AsyncCpsExpr.html","n":"AsyncCpsExpr","t":"class AsyncCpsExpr[F[_], T](dm: Expr[CpsMonad[F]], prev: Seq[ExprTreeGen])(implicit evidence$7: Type[F], evidence$8: Type[T]) extends CpsExpr[F, T]","d":"cps/macros/AsyncCpsExpr","k":"class"},
{"l":"cps/macros/AsyncMacroFlags.html","n":"AsyncMacroFlags","t":"class AsyncMacroFlags(printCode: Boolean, printTree: Boolean, debugLevel: Int, allowShiftedLambda: Boolean, customValueDiscard: Boolean, warnValueDiscard: Boolean, automaticColoring: Boolean, muted: Boolean)","d":"cps/macros/AsyncMacroFlags","k":"class"},
{"l":"cps/macros/CpsExpr.html","n":"CpsExpr","t":"trait CpsExpr[F[_], T](monad: Expr[CpsMonad[F]], prev: Seq[ExprTreeGen])(implicit evidence$1: Type[F], evidence$2: Type[T])","d":"cps/macros/CpsExpr","k":"trait"},
{"l":"cps/macros/CpsExpr.html","n":"append","t":"def append[A : Type](chunk: CpsExpr[F, A])(implicit evidence$18: Type[A], Quotes): CpsExpr[F, A]","d":"cps/macros/CpsExpr","k":"def"},
{"l":"cps/macros/CpsExpr.html","n":"asyncMonad","t":"def asyncMonad: Expr[CpsMonad[F]]","d":"cps/macros/CpsExpr","k":"def"},
{"l":"cps/macros/CpsExpr.html","n":"fLast","t":"def fLast(using Quotes): Expr[F[T]]","d":"cps/macros/CpsExpr","k":"def"},
{"l":"cps/macros/CpsExpr.html","n":"flatMap","t":"def flatMap[A : Type](f: Expr[T => F[A]])(implicit evidence$20: Type[A], Quotes): CpsExpr[F, A]","d":"cps/macros/CpsExpr","k":"def"},
{"l":"cps/macros/CpsExpr.html","n":"flatMapIgnore","t":"def flatMapIgnore[A : Type](t: Expr[F[A]])(implicit evidence$21: Type[A], Quotes): CpsExpr[F, A]","d":"cps/macros/CpsExpr","k":"def"},
{"l":"cps/macros/CpsExpr.html","n":"isAsync","t":"def isAsync: Boolean","d":"cps/macros/CpsExpr","k":"def"},
{"l":"cps/macros/CpsExpr.html","n":"isChanged","t":"def isChanged: Boolean","d":"cps/macros/CpsExpr","k":"def"},
{"l":"cps/macros/CpsExpr.html","n":"map","t":"def map[A : Type](f: Expr[T => A])(implicit evidence$19: Type[A], Quotes): CpsExpr[F, A]","d":"cps/macros/CpsExpr","k":"def"},
{"l":"cps/macros/CpsExpr.html","n":"prependExprs","t":"def prependExprs(exprs: Seq[ExprTreeGen]): CpsExpr[F, T]","d":"cps/macros/CpsExpr","k":"def"},
{"l":"cps/macros/CpsExpr.html","n":"syncOrigin","t":"def syncOrigin(using Quotes): Option[Expr[T]]","d":"cps/macros/CpsExpr","k":"def"},
{"l":"cps/macros/CpsExpr.html","n":"tType","t":"def tType: Type[T]","d":"cps/macros/CpsExpr","k":"def"},
{"l":"cps/macros/CpsExpr.html","n":"transformed","t":"def transformed(using Quotes): Expr[F[T]]","d":"cps/macros/CpsExpr","k":"def"},
{"l":"cps/macros/CpsExpr$.html","n":"CpsExpr","t":"object CpsExpr","d":"cps/macros/CpsExpr$","k":"object"},
{"l":"cps/macros/CpsExpr$.html","n":"async","t":"def async[F[_] : Type, T : Type](dm: Expr[CpsMonad[F]], f: Expr[F[T]]): CpsExpr[F, T]","d":"cps/macros/CpsExpr$","k":"def"},
{"l":"cps/macros/CpsExpr$.html","n":"sync","t":"def sync[F[_] : Type, T : Type](dm: Expr[CpsMonad[F]], f: Expr[T], changed: Boolean): CpsExpr[F, T]","d":"cps/macros/CpsExpr$","k":"def"},
{"l":"cps/macros/CpsExpr$.html","n":"unit","t":"def unit[F[_] : Type](dm: Expr[CpsMonad[F]])(implicit evidence$61: Type[F], Quotes): UnitCpsExpr[F]","d":"cps/macros/CpsExpr$","k":"def"},
{"l":"cps/macros/CpsExpr$.html","n":"wrap","t":"def wrap[F[_] : Type, T : Type](internal: CpsExpr[F, T])(implicit evidence$62: Type[F], evidence$63: Type[T], Quotes): CpsExpr[F, T]","d":"cps/macros/CpsExpr$","k":"def"},
{"l":"cps/macros/ExprTreeGen.html","n":"ExprTreeGen","t":"trait ExprTreeGen","d":"cps/macros/ExprTreeGen","k":"trait"},
{"l":"cps/macros/ExprTreeGen.html","n":"extract","t":"def extract(using Quotes): Statement","d":"cps/macros/ExprTreeGen","k":"def"},
{"l":"cps/macros/ExprTreeGen.html","n":"isChanged","t":"def isChanged: Boolean","d":"cps/macros/ExprTreeGen","k":"def"},
{"l":"cps/macros/FlatMappedCpsExpr.html","n":"FlatMappedCpsExpr","t":"class FlatMappedCpsExpr[F[_], S, T](monad: Expr[CpsMonad[F]], prev: Seq[ExprTreeGen], point: CpsExpr[F, S], mapping: Expr[S => F[T]])(implicit evidence$14: Type[F], evidence$15: Type[S], evidence$16: Type[T]) extends AsyncCpsExpr[F, T]","d":"cps/macros/FlatMappedCpsExpr","k":"class"},
{"l":"cps/macros/GenericAsyncCpsExpr.html","n":"GenericAsyncCpsExpr","t":"class GenericAsyncCpsExpr[F[_], T](dm: Expr[CpsMonad[F]], prev: Seq[ExprTreeGen], fLastExpr: Expr[F[T]])(implicit evidence$9: Type[F], evidence$10: Type[T]) extends AsyncCpsExpr[F, T]","d":"cps/macros/GenericAsyncCpsExpr","k":"class"},
{"l":"cps/macros/GenericSyncCpsExpr.html","n":"GenericSyncCpsExpr","t":"class GenericSyncCpsExpr[F[_], T](dm: Expr[CpsMonad[F]], prev: Seq[ExprTreeGen], lastExpr: Expr[T], changed: Boolean)(implicit evidence$5: Type[F], evidence$6: Type[T]) extends SyncCpsExpr[F, T]","d":"cps/macros/GenericSyncCpsExpr","k":"class"},
{"l":"cps/macros/GenericSyncCpsExpr.html","n":"last","t":"def last(using Quotes): Expr[T]","d":"cps/macros/GenericSyncCpsExpr","k":"def"},
{"l":"cps/macros/MappedCpsExpr.html","n":"MappedCpsExpr","t":"class MappedCpsExpr[F[_], S, T](monad: Expr[CpsMonad[F]], prev: Seq[ExprTreeGen], point: CpsExpr[F, S], mapping: Expr[S => T])(implicit evidence$11: Type[F], evidence$12: Type[S], evidence$13: Type[T]) extends AsyncCpsExpr[F, T]","d":"cps/macros/MappedCpsExpr","k":"class"},
{"l":"cps/macros/StatementExprTreeGen.html","n":"StatementExprTreeGen","t":"class StatementExprTreeGen(using x$1: Quotes)(stat: Statement, changed: Boolean) extends ExprTreeGen","d":"cps/macros/StatementExprTreeGen","k":"class"},
{"l":"cps/macros/StatementExprTreeGen.html","n":"extract","t":"def extract(using qctx: Quotes): Statement","d":"cps/macros/StatementExprTreeGen","k":"def"},
{"l":"cps/macros/StatementExprTreeGen.html","n":"isChanged","t":"def isChanged: Boolean","d":"cps/macros/StatementExprTreeGen","k":"def"},
{"l":"cps/macros/SyncCpsExpr.html","n":"SyncCpsExpr","t":"class SyncCpsExpr[F[_], T](dm: Expr[CpsMonad[F]], prev: Seq[ExprTreeGen])(implicit evidence$3: Type[F], evidence$4: Type[T]) extends CpsExpr[F, T]","d":"cps/macros/SyncCpsExpr","k":"class"},
{"l":"cps/macros/SyncCpsExpr.html","n":"last","t":"def last(using Quotes): Expr[T]","d":"cps/macros/SyncCpsExpr","k":"def"},
{"l":"cps/macros/TransformationContext.html","n":"TransformationContext","t":"class TransformationContext[F[_], T, C <: CpsMonadContext[F]](patternCode: Expr[T], patternType: Type[T], monad: Expr[CpsMonad[F]], monadContext: Expr[C], memoization: Option[Memoization[F]], flags: AsyncMacroFlags, observatory: Observatory, nesting: Int, parent: Option[TransformationContext[_[_], _, _]])","d":"cps/macros/TransformationContext","k":"class"},
{"l":"cps/macros/TransformationContext.html","n":"log","t":"def log(message: String): Unit","d":"cps/macros/TransformationContext","k":"def"},
{"l":"cps/macros/TransformationContext.html","n":"nest","t":"def nest[S](newPatternCode: Expr[S], newPatternType: Type[S], muted: Boolean): TransformationContext[F, S, C]","d":"cps/macros/TransformationContext","k":"def"},
{"l":"cps/macros/TransformationContext.html","n":"nestSame","t":"def nestSame(muted: Boolean): TransformationContext[F, T, C]","d":"cps/macros/TransformationContext","k":"def"},
{"l":"cps/macros/TransformationContext$.html","n":"TransformationContext","t":"object TransformationContext","d":"cps/macros/TransformationContext$","k":"object"},
{"l":"cps/macros/TransformationContext$$Memoization.html","n":"Memoization","t":"class Memoization[F[_]](kind: Kind, monadMemoization: Expr[CpsMonadMemoization[F]])","d":"cps/macros/TransformationContext$$Memoization","k":"class"},
{"l":"cps/macros/UnitCpsExpr.html","n":"UnitCpsExpr","t":"class UnitCpsExpr[F[_]](monad: Expr[CpsMonad[F]], prev: Seq[ExprTreeGen], changed: Boolean)(implicit evidence$17: Type[F], x$4: Quotes) extends SyncCpsExpr[F, Unit]","d":"cps/macros/UnitCpsExpr","k":"class"},
{"l":"cps/macros/UnsealExprTreeGen.html","n":"UnsealExprTreeGen","t":"class UnsealExprTreeGen[T](expr: Expr[T], changed: Boolean) extends ExprTreeGen","d":"cps/macros/UnsealExprTreeGen","k":"class"},
{"l":"cps/macros/UnsealExprTreeGen.html","n":"extract","t":"def extract(using Quotes): Statement","d":"cps/macros/UnsealExprTreeGen","k":"def"},
{"l":"cps/macros/UnsealExprTreeGen.html","n":"isChanged","t":"def isChanged: Boolean","d":"cps/macros/UnsealExprTreeGen","k":"def"},
{"l":"cps/macros/given_FromExpr_AsyncMacroFlags$.html","n":"given_FromExpr_AsyncMacroFlags","t":"object given_FromExpr_AsyncMacroFlags extends FromExpr[AsyncMacroFlags]","d":"cps/macros/given_FromExpr_AsyncMacroFlags$","k":"object"},
{"l":"cps/macros/given_FromExpr_AsyncMacroFlags$.html","n":"unapply","t":"def unapply(v: Expr[AsyncMacroFlags])(using Quotes): Option[AsyncMacroFlags]","d":"cps/macros/given_FromExpr_AsyncMacroFlags$","k":"def"},
{"l":"cps/macros/flags.html","n":"cps.macros.flags","t":"package cps.macros.flags","d":"cps/macros/flags","k":"package"},
{"l":"cps/macros/flags.html","n":"given_FromExpr_DebugLevel","t":"given given_FromExpr_DebugLevel: given_FromExpr_DebugLevel.type","d":"cps/macros/flags","k":"given"},
{"l":"cps/macros/flags/DebugLevel.html","n":"DebugLevel","t":"class DebugLevel(value: Int)","d":"cps/macros/flags/DebugLevel","k":"class"},
{"l":"cps/macros/flags/PrintCode$.html","n":"PrintCode","t":"object PrintCode","d":"cps/macros/flags/PrintCode$","k":"object"},
{"l":"cps/macros/flags/PrintTree$.html","n":"PrintTree","t":"object PrintTree","d":"cps/macros/flags/PrintTree$","k":"object"},
{"l":"cps/macros/flags/given_FromExpr_DebugLevel$.html","n":"given_FromExpr_DebugLevel","t":"object given_FromExpr_DebugLevel extends FromExpr[DebugLevel]","d":"cps/macros/flags/given_FromExpr_DebugLevel$","k":"object"},
{"l":"cps/macros/flags/given_FromExpr_DebugLevel$.html","n":"unapply","t":"def unapply(x: Expr[DebugLevel])(using Quotes): Option[DebugLevel]","d":"cps/macros/flags/given_FromExpr_DebugLevel$","k":"def"},
{"l":"cps/macros/forest.html","n":"cps.macros.forest","t":"package cps.macros.forest","d":"cps/macros/forest","k":"package"},
{"l":"cps/macros/forest/ApplyTransform.html","n":"ApplyTransform","t":"class ApplyTransform[F[_], T, C <: CpsMonadContext[F]](cpsCtx: TransformationContext[F, T, C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C])","d":"cps/macros/forest/ApplyTransform","k":"class"},
{"l":"cps/macros/forest/ApplyTransform.html","n":"run","t":"def run(using qctx: Quotes)(fun: Term, args: List[Term]): CpsExpr[F, T]","d":"cps/macros/forest/ApplyTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"ApplyTreeTransform","t":"trait ApplyTreeTransform[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/ApplyTreeTransform","k":"trait"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"buildApply","t":"def buildApply(cpsFun: <none>, fun: <none>, argRecords: Seq[<none>], applyTerm: <none>, argsProperties: <none>, inShiftedCallChain: Boolean, tails: List[Seq[<none>]]): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"buildShiftedApply","t":"def buildShiftedApply(cpsFun: <none>, fun: <none>, argRecords: Seq[<none>], withAsync: Boolean, tails: List[Seq[<none>]], applyTerm: <none>): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"findAsyncShiftTerm","t":"def findAsyncShiftTerm(e: <none>): (<none>, <none>)","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"handleArgs1","t":"def handleArgs1(applyTerm: <none>, fun: <none>, cpsFun: <none>, args: List[<none>], tails: List[Seq[<none>]], unpure: Boolean): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"handleFun","t":"def handleFun(applyTerm: <none>, fun: <none>, args: List[<none>], tails: List[Seq[<none>]]): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"handleFunApply","t":"def handleFunApply(applyTerm: <none>, fun: <none>, args: List[<none>], fun1: <none>, args1: List[<none>], tails: List[Seq[<none>]]): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"handleFunIdent","t":"def handleFunIdent(applyTerm: <none>, fun: <none>, args: List[<none>], name: String, tails: List[Seq[<none>]]): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"handleFunSelect","t":"def handleFunSelect(applyTerm: <none>, fun: <none>, args: List[<none>], obj: <none>, methodName: String, tails: List[Seq[<none>]]): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"handleFunTypeApply","t":"def handleFunTypeApply(applyTerm: <none>, fun: <none>, args: List[<none>], obj: <none>, targs: List[<none>], tails: List[Seq[<none>]]): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"runApply","t":"def runApply(applyTerm: <none>, fun: <none>, args: List[<none>], tails: List[Seq[<none>]]): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"sameSelect","t":"def sameSelect(funTerm: <none>, name: String, targs: List[<none>], args: List[<none>]): Option[<none>]","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"shiftedApplyCps","t":"def shiftedApplyCps(cpsTree: <none>, originArgs: List[<none>], shiftedArgs: List[<none>], shiftedIndexes: Set[Int], shiftedTails: List[List[<none>]], applyTerm: <none>): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"shiftedApplyTerm","t":"def shiftedApplyTerm(term: <none>, originArgs: List[<none>], shiftedArgs: List[<none>], shiftedIndexes: Set[Int]): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"shiftedLambdaType","t":"def shiftedLambdaType(tpe: <none>): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"shiftedLambdaTypeTree","t":"def shiftedLambdaTypeTree(tpt: <none>): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"shiftedResultCpsTree","t":"def shiftedResultCpsTree(origin: <none>, shifted: <none>): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform.html","n":"withInlineBindings","t":"def withInlineBindings(origin: <none>, tree: <none>): <none>","d":"cps/macros/forest/ApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/ApplyTreeTransform$.html","n":"ApplyTreeTransform","t":"object ApplyTreeTransform","d":"cps/macros/forest/ApplyTreeTransform$","k":"object"},
{"l":"cps/macros/forest/ApplyTreeTransform$.html","n":"run","t":"def run[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](using qctx1: Quotes)(cpsCtx1: TransformationContext[F, T, C], applyTerm: Term, fun: Term, args: List[Term]): CpsExpr[F, T]","d":"cps/macros/forest/ApplyTreeTransform$","k":"def"},
{"l":"cps/macros/forest/AssignTransform.html","n":"AssignTransform","t":"class AssignTransform[F[_], T, C <: CpsMonadContext[F]](cpsCtx: TransformationContext[F, T, C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C])","d":"cps/macros/forest/AssignTransform","k":"class"},
{"l":"cps/macros/forest/AssignTransform.html","n":"run","t":"def run(using Quotes)(left: Term, right: Term): CpsExpr[F, T]","d":"cps/macros/forest/AssignTransform","k":"def"},
{"l":"cps/macros/forest/AssignTransform.html","n":"run1","t":"def run1[L : Type, R : Type](using Quotes)(left: Term, right: Term, cpsLeft: CpsExpr[F, L], cpsRight: CpsExpr[F, R]): CpsExpr[F, T]","d":"cps/macros/forest/AssignTransform","k":"def"},
{"l":"cps/macros/forest/AssignTransform.html","n":"run2","t":"def run2[L : Type, R : Type, LU : Type](using Quotes)(left: Term, right: Term, cpsLeft: CpsExpr[F, L], cpsRight: CpsExpr[F, R], cpsLu: CpsExpr[F, LU]): CpsExpr[F, T]","d":"cps/macros/forest/AssignTransform","k":"def"},
{"l":"cps/macros/forest/AssignTransform.html","n":"runWithLeft","t":"def runWithLeft[L : Type](using Quotes)(left: Term, right: Term, cpsLeft: CpsExpr[F, L]): CpsExpr[F, T]","d":"cps/macros/forest/AssignTransform","k":"def"},
{"l":"cps/macros/forest/AsyncTreeShifter.html","n":"AsyncTreeShifter","t":"trait AsyncTreeShifter[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/AsyncTreeShifter","k":"trait"},
{"l":"cps/macros/forest/AsyncTreeShifter.html","n":"asyncShift","t":"def asyncShift(t: <none>, shiftedSymbols: Set[<none>]): <none>","d":"cps/macros/forest/AsyncTreeShifter","k":"def"},
{"l":"cps/macros/forest/AsyncTreeShifter.html","n":"asyncShiftCaseDef","t":"def asyncShiftCaseDef(cd: <none>, shiftedSymbols: Set[<none>]): <none>","d":"cps/macros/forest/AsyncTreeShifter","k":"def"},
{"l":"cps/macros/forest/AsyncTreeShifter.html","n":"asyncShiftDefinition","t":"def asyncShiftDefinition(t: <none>, shiftedSymbols: Set[<none>]): <none>","d":"cps/macros/forest/AsyncTreeShifter","k":"def"},
{"l":"cps/macros/forest/AsyncTreeShifter.html","n":"asyncShiftStatement","t":"def asyncShiftStatement(t: <none>, shiftedSymbols: Set[<none>]): <none>","d":"cps/macros/forest/AsyncTreeShifter","k":"def"},
{"l":"cps/macros/forest/AwaitTreeTransform.html","n":"AwaitTreeTransform","t":"trait AwaitTreeTransform[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/AwaitTreeTransform","k":"trait"},
{"l":"cps/macros/forest/AwaitTreeTransform.html","n":"adoptContextInMyAwait","t":"def adoptContextInMyAwait(awaitTerm: <none>, arg: <none>, monadContext: <none>): <none>","d":"cps/macros/forest/AwaitTreeTransform","k":"def"},
{"l":"cps/macros/forest/AwaitTreeTransform.html","n":"runAwait","t":"def runAwait(term: <none>, arg: <none>, awaitCpsMonadType: <none>, awaitCpsMonad: <none>, awaitCpsMonadContext: <none>): <none>","d":"cps/macros/forest/AwaitTreeTransform","k":"def"},
{"l":"cps/macros/forest/AwaitTreeTransform.html","n":"runMyAwait","t":"def runMyAwait(awaitTerm: <none>, arg: <none>, context: <none>): <none>","d":"cps/macros/forest/AwaitTreeTransform","k":"def"},
{"l":"cps/macros/forest/AwaitTreeTransform.html","n":"runOtherAwait","t":"def runOtherAwait(awaitTerm: <none>, arg: <none>, targ: <none>, otherCpsMonad: <none>, myMonadContext: <none>): <none>","d":"cps/macros/forest/AwaitTreeTransform","k":"def"},
{"l":"cps/macros/forest/BlockTransform.html","n":"BlockTransform","t":"class BlockTransform[F[_], T, C <: CpsMonadContext[F]](cpsCtx: TransformationContext[F, T, C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C])","d":"cps/macros/forest/BlockTransform","k":"class"},
{"l":"cps/macros/forest/BlockTransform.html","n":"buildAwaitValueDiscardExpr","t":"def buildAwaitValueDiscardExpr(using Quotes)(discardTerm: Term, p: Expr[_]): Expr[Any]","d":"cps/macros/forest/BlockTransform","k":"def"},
{"l":"cps/macros/forest/BlockTransform.html","n":"checkValueDiscarded","t":"def checkValueDiscarded(using Quotes)(t: Term): Boolean","d":"cps/macros/forest/BlockTransform","k":"def"},
{"l":"cps/macros/forest/BlockTransform.html","n":"run","t":"def run(using qctx: Quotes)(prevs: List[Statement], last: Term): CpsExpr[F, T]","d":"cps/macros/forest/BlockTransform","k":"def"},
{"l":"cps/macros/forest/ConstTransform$.html","n":"ConstTransform","t":"object ConstTransform","d":"cps/macros/forest/ConstTransform$","k":"object"},
{"l":"cps/macros/forest/ConstTransform$.html","n":"run","t":"def run[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](using Quotes)(cpsCtx: TransformationContext[F, T, C], constTerm: Literal): CpsExpr[F, T]","d":"cps/macros/forest/ConstTransform$","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope.html","n":"CpsTreeScope","t":"trait CpsTreeScope[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/CpsTreeScope","k":"trait"},
{"l":"cps/macros/forest/CpsTreeScope.html","n":"adopt","t":"def adopt(t: Term): Term","d":"cps/macros/forest/CpsTreeScope","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope.html","n":"adoptTerm","t":"def adoptTerm(t: Term): Term","d":"cps/macros/forest/CpsTreeScope","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope.html","n":"adoptTermFun","t":"def adoptTermFun(op: Term => Term): Term => Term","d":"cps/macros/forest/CpsTreeScope","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope.html","n":"adoptType","t":"def adoptType(t: TypeRepr): TypeRepr","d":"cps/macros/forest/CpsTreeScope","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AppendCpsTree.html","n":"AppendCpsTree","t":"class AppendCpsTree(frs: CpsTree, snd: CpsTree) extends CpsTree","d":"cps/macros/forest/CpsTreeScope$AppendCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$AppendCpsTree.html","n":"appendFinal","t":"def appendFinal(next: CpsTree): CpsTree","d":"cps/macros/forest/CpsTreeScope$AppendCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AppendCpsTree.html","n":"isAsync","t":"def isAsync: Boolean","d":"cps/macros/forest/CpsTreeScope$AppendCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AppendCpsTree.html","n":"isChanged","t":"def isChanged: Boolean","d":"cps/macros/forest/CpsTreeScope$AppendCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AppendCpsTree.html","n":"isLambda","t":"def isLambda: Boolean","d":"cps/macros/forest/CpsTreeScope$AppendCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncCpsTree.html","n":"AsyncCpsTree","t":"class AsyncCpsTree extends CpsTree","d":"cps/macros/forest/CpsTreeScope$AsyncCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncCpsTree.html","n":"appendFinal","t":"def appendFinal(next: CpsTree): CpsTree","d":"cps/macros/forest/CpsTreeScope$AsyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncCpsTree.html","n":"applyAwait","t":"def applyAwait(newOtpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$AsyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncCpsTree.html","n":"isAsync","t":"def isAsync: Boolean","d":"cps/macros/forest/CpsTreeScope$AsyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncCpsTree.html","n":"isChanged","t":"def isChanged: Boolean","d":"cps/macros/forest/CpsTreeScope$AsyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncCpsTree.html","n":"monadFlatMap","t":"def monadFlatMap(f: Term => Term, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$AsyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncCpsTree.html","n":"monadMap","t":"def monadMap(f: Term => Term, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$AsyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncCpsTree.html","n":"syncOrigin","t":"def syncOrigin: Option[Term]","d":"cps/macros/forest/CpsTreeScope$AsyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncCpsTree.html","n":"transformed","t":"def transformed: Term","d":"cps/macros/forest/CpsTreeScope$AsyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncLambdaCpsTree.html","n":"AsyncLambdaCpsTree","t":"class AsyncLambdaCpsTree(originLambda: Term, params: List[ValDef], body: CpsTree, otpe: TypeRepr) extends CpsTree","d":"cps/macros/forest/CpsTreeScope$AsyncLambdaCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncLambdaCpsTree.html","n":"appendFinal","t":"def appendFinal(next: CpsTree): CpsTree","d":"cps/macros/forest/CpsTreeScope$AsyncLambdaCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncLambdaCpsTree.html","n":"monadFlatMap","t":"def monadFlatMap(f: Term => Term, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$AsyncLambdaCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncLambdaCpsTree.html","n":"monadMap","t":"def monadMap(f: Term => Term, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$AsyncLambdaCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AsyncLambdaCpsTree.html","n":"rLambda","t":"def rLambda: Term","d":"cps/macros/forest/CpsTreeScope$AsyncLambdaCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AwaitAsyncCpsTree.html","n":"AwaitAsyncCpsTree","t":"class AwaitAsyncCpsTree(nested: CpsTree, otpe: TypeRepr) extends AsyncCpsTree","d":"cps/macros/forest/CpsTreeScope$AwaitAsyncCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$AwaitAsyncCpsTree.html","n":"castOtpe","t":"def castOtpe(ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$AwaitAsyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AwaitAsyncCpsTree.html","n":"inCake","t":"def inCake[F1[_], T1, C1 <: CpsMonadContext[F1]](otherCake: TreeTransformScope[F1, T1, C1]): CpsTree","d":"cps/macros/forest/CpsTreeScope$AwaitAsyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AwaitAsyncCpsTree.html","n":"isLambda","t":"def isLambda: Boolean","d":"cps/macros/forest/CpsTreeScope$AwaitAsyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AwaitAsyncCpsTree.html","n":"transformed","t":"def transformed: Term","d":"cps/macros/forest/CpsTreeScope$AwaitAsyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AwaitSyncCpsTree.html","n":"AwaitSyncCpsTree","t":"class AwaitSyncCpsTree(origin: Term, otpe: TypeRepr) extends AsyncCpsTree","d":"cps/macros/forest/CpsTreeScope$AwaitSyncCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$AwaitSyncCpsTree.html","n":"castOtpe","t":"def castOtpe(newOtpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$AwaitSyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AwaitSyncCpsTree.html","n":"isLambda","t":"def isLambda: Boolean","d":"cps/macros/forest/CpsTreeScope$AwaitSyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$AwaitSyncCpsTree.html","n":"transformed","t":"def transformed: Term","d":"cps/macros/forest/CpsTreeScope$AwaitSyncCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$BlockCpsTree.html","n":"BlockCpsTree","t":"class BlockCpsTree(prevs: Queue[Statement], last: CpsTree) extends CpsTree","d":"cps/macros/forest/CpsTreeScope$BlockCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$BlockCpsTree.html","n":"appendFinal","t":"def appendFinal(next: CpsTree): CpsTree","d":"cps/macros/forest/CpsTreeScope$BlockCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$BlockCpsTree.html","n":"monadFlatMap","t":"def monadFlatMap(f: Term => Term, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$BlockCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$BlockCpsTree.html","n":"monadMap","t":"def monadMap(f: Term => Term, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$BlockCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$BlockCpsTree.html","n":"otpe","t":"def otpe: TypeRepr","d":"cps/macros/forest/CpsTreeScope$BlockCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$BlockCpsTree.html","n":"toLast","t":"def toLast(f: CpsTree => CpsTree): CpsTree","d":"cps/macros/forest/CpsTreeScope$BlockCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$BlockCpsTree$.html","n":"BlockCpsTree","t":"object BlockCpsTree","d":"cps/macros/forest/CpsTreeScope$BlockCpsTree$","k":"object"},
{"l":"cps/macros/forest/CpsTreeScope$BlockCpsTree$.html","n":"prevsFrom","t":"def prevsFrom(block: BlockCpsTree): Queue[Statement]","d":"cps/macros/forest/CpsTreeScope$BlockCpsTree$","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$BlockCpsTree$$Matcher$.html","n":"Matcher","t":"object Matcher","d":"cps/macros/forest/CpsTreeScope$BlockCpsTree$$Matcher$","k":"object"},
{"l":"cps/macros/forest/CpsTreeScope$BlockCpsTree$$Matcher$.html","n":"unapply","t":"def unapply(cpsTree: CpsTree): Option[(Queue[Statement], CpsTree)]","d":"cps/macros/forest/CpsTreeScope$BlockCpsTree$$Matcher$","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CallChainSubstCpsTree.html","n":"CallChainSubstCpsTree","t":"class CallChainSubstCpsTree(origin: Term, shifted: Term, otpe: TypeRepr) extends CpsTree","d":"cps/macros/forest/CpsTreeScope$CallChainSubstCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$CallChainSubstCpsTree.html","n":"prunned","t":"def prunned: CpsTree","d":"cps/macros/forest/CpsTreeScope$CallChainSubstCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"CpsTree","t":"class CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"append","t":"def append(next: CpsTree): CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"appendFinal","t":"def appendFinal(next: CpsTree): CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"applyAwait","t":"def applyAwait(newOtpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"castOtpe","t":"def castOtpe(newOtpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"inCake","t":"def inCake[F1[_], T1, C1 <: CpsMonadContext[F1]](otherScope: TreeTransformScope[F1, T1, C1]): CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"isAsync","t":"def isAsync: Boolean","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"isChanged","t":"def isChanged: Boolean","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"isLambda","t":"def isLambda: Boolean","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"isSync","t":"def isSync: Boolean","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"monadFlatMap","t":"def monadFlatMap(f: Term => Term, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"monadMap","t":"def monadMap(f: Term => Term, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"otpe","t":"def otpe: TypeRepr","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"prepend","t":"def prepend(prev: CpsTree): CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"rtpe","t":"def rtpe: TypeRepr","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"select","t":"def select(orig: Term, symbol: Symbol, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"syncOrigin","t":"def syncOrigin: Option[Term]","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"toResult","t":"def toResult[T : Type]: CpsExpr[F, T]","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"toResultWithType","t":"def toResultWithType[T](qt: Type[T]): CpsExpr[F, T]","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"transformed","t":"def transformed: Term","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree.html","n":"typeApply","t":"def typeApply(orig: Term, targs: List[TypeTree], ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree$.html","n":"CpsTree","t":"object CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree$","k":"object"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree$.html","n":"impure","t":"def impure(transformed: Term, tpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree$","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$CpsTree$.html","n":"pure","t":"def pure(origin: Term, isChanged: Boolean): CpsTree","d":"cps/macros/forest/CpsTreeScope$CpsTree$","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$FlatMappedCpsTree.html","n":"FlatMappedCpsTree","t":"class FlatMappedCpsTree(prev: CpsTree, opm: Term => Term, otpe: TypeRepr) extends AsyncCpsTree","d":"cps/macros/forest/CpsTreeScope$FlatMappedCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$FlatMappedCpsTree.html","n":"castOtpe","t":"def castOtpe(ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$FlatMappedCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$FlatMappedCpsTree.html","n":"isLambda","t":"def isLambda: Boolean","d":"cps/macros/forest/CpsTreeScope$FlatMappedCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$FlatMappedCpsTree.html","n":"transformed","t":"def transformed: Term","d":"cps/macros/forest/CpsTreeScope$FlatMappedCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$InlinedCpsTree.html","n":"InlinedCpsTree","t":"class InlinedCpsTree(origin: Inlined, bindings: List[Definition], nested: CpsTree) extends CpsTree","d":"cps/macros/forest/CpsTreeScope$InlinedCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$InlinedCpsTree.html","n":"appendFinal","t":"def appendFinal(next: CpsTree): CpsTree","d":"cps/macros/forest/CpsTreeScope$InlinedCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$InlinedCpsTree.html","n":"monadFlatMap","t":"def monadFlatMap(f: Term => Term, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$InlinedCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$InlinedCpsTree.html","n":"monadMap","t":"def monadMap(f: Term => Term, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$InlinedCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$InlinedCpsTree.html","n":"otpe","t":"def otpe: TypeRepr","d":"cps/macros/forest/CpsTreeScope$InlinedCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$MappedCpsTree.html","n":"MappedCpsTree","t":"class MappedCpsTree(prev: CpsTree, op: Term => Term, otpe: TypeRepr) extends AsyncCpsTree","d":"cps/macros/forest/CpsTreeScope$MappedCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$MappedCpsTree.html","n":"castOtpe","t":"def castOtpe(newOtpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$MappedCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$MappedCpsTree.html","n":"isLambda","t":"def isLambda: Boolean","d":"cps/macros/forest/CpsTreeScope$MappedCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$MappedCpsTree.html","n":"transformed","t":"def transformed: Term","d":"cps/macros/forest/CpsTreeScope$MappedCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$PureCpsTree.html","n":"PureCpsTree","t":"class PureCpsTree(origin: Term, isChanged: Boolean) extends CpsTree","d":"cps/macros/forest/CpsTreeScope$PureCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$PureCpsTree.html","n":"appendFinal","t":"def appendFinal(next: CpsTree): CpsTree","d":"cps/macros/forest/CpsTreeScope$PureCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$PureCpsTree.html","n":"applyAwait","t":"def applyAwait(newOtpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$PureCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$PureCpsTree.html","n":"castOtpe","t":"def castOtpe(newOtpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$PureCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$PureCpsTree.html","n":"isAsync","t":"def isAsync: Boolean","d":"cps/macros/forest/CpsTreeScope$PureCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$PureCpsTree.html","n":"isLambda","t":"def isLambda: Boolean","d":"cps/macros/forest/CpsTreeScope$PureCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$PureCpsTree.html","n":"monadFlatMap","t":"def monadFlatMap(f: Term => Term, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$PureCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$PureCpsTree.html","n":"monadMap","t":"def monadMap(f: Term => Term, ntpe: TypeRepr): CpsTree","d":"cps/macros/forest/CpsTreeScope$PureCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$PureCpsTree.html","n":"otpe","t":"def otpe: TypeRepr","d":"cps/macros/forest/CpsTreeScope$PureCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$PureCpsTree.html","n":"syncOrigin","t":"def syncOrigin: Option[Term]","d":"cps/macros/forest/CpsTreeScope$PureCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$PureCpsTree.html","n":"transformed","t":"def transformed: Term","d":"cps/macros/forest/CpsTreeScope$PureCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$SelectTypeApplyCpsTree.html","n":"SelectTypeApplyCpsTree","t":"class SelectTypeApplyCpsTree(origin: Option[Term], nested: CpsTree, targs: List[TypeTree], selects: List[SelectTypeApplyRecord], otpe: TypeRepr, changed: Boolean) extends CpsTree","d":"cps/macros/forest/CpsTreeScope$SelectTypeApplyCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$SelectTypeApplyCpsTree.html","n":"apply","t":"def apply(term: Term): Term","d":"cps/macros/forest/CpsTreeScope$SelectTypeApplyCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$SelectTypeApplyCpsTree$.html","n":"SelectTypeApplyCpsTree","t":"object SelectTypeApplyCpsTree","d":"cps/macros/forest/CpsTreeScope$SelectTypeApplyCpsTree$","k":"object"},
{"l":"cps/macros/forest/CpsTreeScope$SelectTypeApplyCpsTree$.html","n":"create","t":"def create(origin: Option[Term], nested: CpsTree, targs: List[TypeTree], selects: List[SelectTypeApplyRecord], otpe: TypeRepr, changed: Boolean): SelectTypeApplyCpsTree","d":"cps/macros/forest/CpsTreeScope$SelectTypeApplyCpsTree$","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$SelectTypeApplyRecord.html","n":"SelectTypeApplyRecord","t":"class SelectTypeApplyRecord(prevTpe: TypeRepr, symbol: Symbol, targs: List[TypeTree], level: Int)","d":"cps/macros/forest/CpsTreeScope$SelectTypeApplyRecord","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$SelectTypeApplyRecord.html","n":"inCake","t":"def inCake[F1[_], T1, C1 <: CpsMonadContext[F1]](otherCake: TreeTransformScope[F1, T1, C1]): SelectTypeApplyRecord","d":"cps/macros/forest/CpsTreeScope$SelectTypeApplyRecord","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$ValCpsTree.html","n":"ValCpsTree","t":"class ValCpsTree(valDef: ValDef, rightPart: CpsTree, nested: CpsTree, canBeLambda: Boolean) extends CpsTree","d":"cps/macros/forest/CpsTreeScope$ValCpsTree","k":"class"},
{"l":"cps/macros/forest/CpsTreeScope$ValCpsTree.html","n":"appendFinal","t":"def appendFinal(next: CpsTree): CpsTree","d":"cps/macros/forest/CpsTreeScope$ValCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$ValCpsTree.html","n":"appendValDef","t":"def appendValDef(right: Term): Term","d":"cps/macros/forest/CpsTreeScope$ValCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$ValCpsTree.html","n":"appendValDefToNextTerm","t":"def appendValDefToNextTerm(valDef: ValDef, next: Term): Term","d":"cps/macros/forest/CpsTreeScope$ValCpsTree","k":"def"},
{"l":"cps/macros/forest/CpsTreeScope$ValCpsTree.html","n":"inCake","t":"def inCake[F1[_], T1, C1 <: CpsMonadContext[F1]](otherScope: TreeTransformScope[F1, T1, C1]): ValCpsTree","d":"cps/macros/forest/CpsTreeScope$ValCpsTree","k":"def"},
{"l":"cps/macros/forest/DefCpsExpr.html","n":"DefCpsExpr","t":"class DefCpsExpr[F[_]](using qctx: Quotes)(monad: Expr[CpsMonad[F]], prev: Seq[ExprTreeGen], definition: Definition, changed: Boolean)(implicit evidence$4: Type[F]) extends SyncCpsExpr[F, Unit]","d":"cps/macros/forest/DefCpsExpr","k":"class"},
{"l":"cps/macros/forest/DefCpsExpr.html","n":"append","t":"def append[A : Type](chunk: CpsExpr[F, A])(implicit evidence$5: Type[A], Quotes): CpsExpr[F, A]","d":"cps/macros/forest/DefCpsExpr","k":"def"},
{"l":"cps/macros/forest/DefCpsExpr.html","n":"last","t":"def last(using Quotes): Expr[Unit]","d":"cps/macros/forest/DefCpsExpr","k":"def"},
{"l":"cps/macros/forest/DefCpsExpr.html","n":"prependExprs","t":"def prependExprs(exprs: Seq[ExprTreeGen]): CpsExpr[F, Unit]","d":"cps/macros/forest/DefCpsExpr","k":"def"},
{"l":"cps/macros/forest/IdentTransform.html","n":"IdentTransform","t":"class IdentTransform[F[_], T, C <: CpsMonadContext[F]](cpsCtx: TransformationContext[F, T, C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C])","d":"cps/macros/forest/IdentTransform","k":"class"},
{"l":"cps/macros/forest/IdentTransform.html","n":"run","t":"def run(using Quotes)(name: String): CpsExpr[F, T]","d":"cps/macros/forest/IdentTransform","k":"def"},
{"l":"cps/macros/forest/IfTransform$.html","n":"IfTransform","t":"object IfTransform","d":"cps/macros/forest/IfTransform$","k":"object"},
{"l":"cps/macros/forest/IfTransform$.html","n":"run","t":"def run[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](cpsCtx: TransformationContext[F, T, C], cond: Expr[Boolean], ifTrue: Expr[T], ifFalse: Expr[T])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C], Quotes): CpsExpr[F, T]","d":"cps/macros/forest/IfTransform$","k":"def"},
{"l":"cps/macros/forest/ImportTransform$.html","n":"ImportTransform","t":"object ImportTransform","d":"cps/macros/forest/ImportTransform$","k":"object"},
{"l":"cps/macros/forest/ImportTransform$.html","n":"fromBlock","t":"def fromBlock[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](using Quotes)(cpsCtx: TransformationContext[F, T, C], importTree: Import): CpsExpr[F, Unit]","d":"cps/macros/forest/ImportTransform$","k":"def"},
{"l":"cps/macros/forest/InlinedTreeTransform.html","n":"InlinedTreeTransform","t":"trait InlinedTreeTransform[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/InlinedTreeTransform","k":"trait"},
{"l":"cps/macros/forest/InlinedTreeTransform.html","n":"checkLambdaDef","t":"def checkLambdaDef(term: <none>): Option[<none>]","d":"cps/macros/forest/InlinedTreeTransform","k":"def"},
{"l":"cps/macros/forest/InlinedTreeTransform.html","n":"runInlined","t":"def runInlined(origin: <none>): <none>","d":"cps/macros/forest/InlinedTreeTransform","k":"def"},
{"l":"cps/macros/forest/InlinedTreeTransform$InlinedBindingRecord.html","n":"InlinedBindingRecord","t":"trait InlinedBindingRecord","d":"cps/macros/forest/InlinedTreeTransform$InlinedBindingRecord","k":"trait"},
{"l":"cps/macros/forest/InlinedTreeTransform$InlinedBindingsRecord.html","n":"InlinedBindingsRecord","t":"class InlinedBindingsRecord(changes: HashMap[Symbol, InlinedBindingRecord], newBindings: List[Definition], awaitVals: List[ValDef])","d":"cps/macros/forest/InlinedTreeTransform$InlinedBindingsRecord","k":"class"},
{"l":"cps/macros/forest/InlinedTreeTransform$InlinedFunBindingRecord.html","n":"InlinedFunBindingRecord","t":"class InlinedFunBindingRecord(newSym: Symbol, cpsTree: CpsTree, oldValDef: ValDef, newResultType: TypeRepr) extends InlinedBindingRecord","d":"cps/macros/forest/InlinedTreeTransform$InlinedFunBindingRecord","k":"class"},
{"l":"cps/macros/forest/InlinedTreeTransform$InlinedValBindingRecord.html","n":"InlinedValBindingRecord","t":"class InlinedValBindingRecord(newSym: Symbol, cpsTree: CpsTree, oldValDef: ValDef) extends InlinedBindingRecord","d":"cps/macros/forest/InlinedTreeTransform$InlinedValBindingRecord","k":"class"},
{"l":"cps/macros/forest/InlinedTreeTransform$.html","n":"InlinedTreeTransform","t":"object InlinedTreeTransform","d":"cps/macros/forest/InlinedTreeTransform$","k":"object"},
{"l":"cps/macros/forest/InlinedTreeTransform$.html","n":"run","t":"def run[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](using qctx1: Quotes)(cpsCtx1: TransformationContext[F, T, C], inlinedTerm: Inlined): CpsExpr[F, T]","d":"cps/macros/forest/InlinedTreeTransform$","k":"def"},
{"l":"cps/macros/forest/KnownTreeFragments.html","n":"KnownTreeFragments","t":"trait KnownTreeFragments[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/KnownTreeFragments","k":"trait"},
{"l":"cps/macros/forest/KnownTreeFragments.html","n":"awaitPure","t":"val awaitPure: <none>","d":"cps/macros/forest/KnownTreeFragments","k":"val"},
{"l":"cps/macros/forest/KnownTreeFragments.html","n":"awaitSymbol","t":"val awaitSymbol: <none>","d":"cps/macros/forest/KnownTreeFragments","k":"val"},
{"l":"cps/macros/forest/KnownTreeFragments.html","n":"flatMapSymbol","t":"val flatMapSymbol: <none>","d":"cps/macros/forest/KnownTreeFragments","k":"val"},
{"l":"cps/macros/forest/KnownTreeFragments.html","n":"mapSymbol","t":"val mapSymbol: <none>","d":"cps/macros/forest/KnownTreeFragments","k":"val"},
{"l":"cps/macros/forest/KnownTreeFragments.html","n":"monadTypeTree","t":"val monadTypeTree: <none>","d":"cps/macros/forest/KnownTreeFragments","k":"val"},
{"l":"cps/macros/forest/KnownTreeFragments.html","n":"objAsyncShift","t":"val objAsyncShift: <none>","d":"cps/macros/forest/KnownTreeFragments","k":"val"},
{"l":"cps/macros/forest/KnownTreeFragments.html","n":"partialFunctionType","t":"val partialFunctionType: <none>","d":"cps/macros/forest/KnownTreeFragments","k":"val"},
{"l":"cps/macros/forest/KnownTreeFragments.html","n":"pureSymbol","t":"val pureSymbol: <none>","d":"cps/macros/forest/KnownTreeFragments","k":"val"},
{"l":"cps/macros/forest/LambdaTreeTransform.html","n":"LambdaTreeTransform","t":"trait LambdaTreeTransform[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/LambdaTreeTransform","k":"trait"},
{"l":"cps/macros/forest/LambdaTreeTransform.html","n":"runLambda","t":"def runLambda(lambdaTerm: <none>, params: List[<none>], expr: <none>): <none>","d":"cps/macros/forest/LambdaTreeTransform","k":"def"},
{"l":"cps/macros/forest/LambdaTreeTransform.html","n":"shiftedMethodType","t":"def shiftedMethodType(paramNames: List[String], paramTypes: List[<none>], otpe: <none>): <none>","d":"cps/macros/forest/LambdaTreeTransform","k":"def"},
{"l":"cps/macros/forest/LambdaTreeTransform$.html","n":"LambdaTreeTransform","t":"object LambdaTreeTransform","d":"cps/macros/forest/LambdaTreeTransform$","k":"object"},
{"l":"cps/macros/forest/LambdaTreeTransform$.html","n":"run","t":"def run[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](using qctx1: Quotes)(cpsCtx1: TransformationContext[F, T, C], lambdaTerm: Term, params: List[ValDef], expr: Term): CpsExpr[F, T]","d":"cps/macros/forest/LambdaTreeTransform$","k":"def"},
{"l":"cps/macros/forest/MatchTreeTransform.html","n":"MatchTreeTransform","t":"trait MatchTreeTransform[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/MatchTreeTransform","k":"trait"},
{"l":"cps/macros/forest/MatchTreeTransform.html","n":"runMatch","t":"def runMatch(matchTerm: <none>): <none>","d":"cps/macros/forest/MatchTreeTransform","k":"def"},
{"l":"cps/macros/forest/MatchTreeTransform$.html","n":"MatchTreeTransform","t":"object MatchTreeTransform","d":"cps/macros/forest/MatchTreeTransform$","k":"object"},
{"l":"cps/macros/forest/MatchTreeTransform$.html","n":"run","t":"def run[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](using qctx1: Quotes)(cpsCtx1: TransformationContext[F, T, C], matchTerm: Match): CpsExpr[F, T]","d":"cps/macros/forest/MatchTreeTransform$","k":"def"},
{"l":"cps/macros/forest/NewTransform.html","n":"NewTransform","t":"class NewTransform[F[_], T, C <: CpsMonadContext[F]](cpsCtx: TransformationContext[F, T, C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C])","d":"cps/macros/forest/NewTransform","k":"class"},
{"l":"cps/macros/forest/NewTransform.html","n":"run","t":"def run(using Quotes)(tp: TypeTree): CpsExpr[F, T]","d":"cps/macros/forest/NewTransform","k":"def"},
{"l":"cps/macros/forest/RepeatedTransform.html","n":"RepeatedTransform","t":"class RepeatedTransform[F[_], T, C <: CpsMonadContext[F]](cpsCtx: TransformationContext[F, T, C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C])","d":"cps/macros/forest/RepeatedTransform","k":"class"},
{"l":"cps/macros/forest/RepeatedTransform.html","n":"run","t":"def run(using Quotes)(repeated: Repeated): CpsExpr[F, T]","d":"cps/macros/forest/RepeatedTransform","k":"def"},
{"l":"cps/macros/forest/RepeatedTreeTransform.html","n":"RepeatedTreeTransform","t":"trait RepeatedTreeTransform[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/RepeatedTreeTransform","k":"trait"},
{"l":"cps/macros/forest/RepeatedTreeTransform.html","n":"runRepeated","t":"def runRepeated(repeated: <none>, elements: List[<none>], tpt: <none>): <none>","d":"cps/macros/forest/RepeatedTreeTransform","k":"def"},
{"l":"cps/macros/forest/RepeatedTreeTransform$.html","n":"RepeatedTreeTransform","t":"object RepeatedTreeTransform","d":"cps/macros/forest/RepeatedTreeTransform$","k":"object"},
{"l":"cps/macros/forest/RepeatedTreeTransform$.html","n":"run","t":"def run[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](using qctx1: Quotes)(cpsCtx1: TransformationContext[F, T, C], repeatedTerm: Term, elements: List[Term], tpt: TypeTree): CpsExpr[F, T]","d":"cps/macros/forest/RepeatedTreeTransform$","k":"def"},
{"l":"cps/macros/forest/ReturnTransform.html","n":"ReturnTransform","t":"class ReturnTransform[F[_], T, C <: CpsMonadContext[F]](cpsCtx: TransformationContext[F, T, C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C])","d":"cps/macros/forest/ReturnTransform","k":"class"},
{"l":"cps/macros/forest/ReturnTransform.html","n":"run","t":"def run(using Quotes)(returnTerm: Return, from: Symbol): CpsExpr[F, T]","d":"cps/macros/forest/ReturnTransform","k":"def"},
{"l":"cps/macros/forest/RootTreeTransform.html","n":"RootTreeTransform","t":"trait RootTreeTransform[F[_], CT, CC <: CpsMonadContext[F]]()","d":"cps/macros/forest/RootTreeTransform","k":"trait"},
{"l":"cps/macros/forest/RootTreeTransform.html","n":"exprToTree","t":"def exprToTree[T](expr: CpsExpr[F, T], e: <none>): <none>","d":"cps/macros/forest/RootTreeTransform","k":"def"},
{"l":"cps/macros/forest/RootTreeTransform.html","n":"runRoot","t":"def runRoot(term: <none>, muted: Boolean): <none>","d":"cps/macros/forest/RootTreeTransform","k":"def"},
{"l":"cps/macros/forest/RootTreeTransform.html","n":"runRootUneta","t":"def runRootUneta(term: <none>, muted: Boolean): <none>","d":"cps/macros/forest/RootTreeTransform","k":"def"},
{"l":"cps/macros/forest/RootTreeTransform$B2$.html","n":"B2","t":"object B2","d":"cps/macros/forest/RootTreeTransform$B2$","k":"object"},
{"l":"cps/macros/forest/RootTreeTransform$B2$.html","n":"inNestedContext","t":"def inNestedContext(term: Term, muted: Boolean, op: TreeTransformScope[F, _, _] => CpsTree): CpsTree","d":"cps/macros/forest/RootTreeTransform$B2$","k":"def"},
{"l":"cps/macros/forest/RootTreeTransform$B2$.html","n":"nestScope","t":"def nestScope[E : Type](e: Expr[E], muted: Boolean): TreeTransformScope[F, E, CC]","d":"cps/macros/forest/RootTreeTransform$B2$","k":"def"},
{"l":"cps/macros/forest/SelectOuterTreeTransform.html","n":"SelectOuterTreeTransform","t":"trait SelectOuterTreeTransform[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/SelectOuterTreeTransform","k":"trait"},
{"l":"cps/macros/forest/SelectOuterTreeTransform.html","n":"runSelectOuter","t":"def runSelectOuter(term: <none>): <none>","d":"cps/macros/forest/SelectOuterTreeTransform","k":"def"},
{"l":"cps/macros/forest/SelectOuterTreeTransform$.html","n":"SelectOuterTreeTransform","t":"object SelectOuterTreeTransform","d":"cps/macros/forest/SelectOuterTreeTransform$","k":"object"},
{"l":"cps/macros/forest/SelectOuterTreeTransform$.html","n":"run","t":"def run[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](using qctx1: Quotes)(cpsCtx1: TransformationContext[F, T, C], selectOuterTerm: SelectOuter): CpsExpr[F, T]","d":"cps/macros/forest/SelectOuterTreeTransform$","k":"def"},
{"l":"cps/macros/forest/SelectTreeTransform.html","n":"SelectTreeTransform","t":"trait SelectTreeTransform[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/SelectTreeTransform","k":"trait"},
{"l":"cps/macros/forest/SelectTreeTransform.html","n":"runSelect","t":"def runSelect(selectTerm: <none>): <none>","d":"cps/macros/forest/SelectTreeTransform","k":"def"},
{"l":"cps/macros/forest/SelectTreeTransform$.html","n":"SelectTreeTransform","t":"object SelectTreeTransform","d":"cps/macros/forest/SelectTreeTransform$","k":"object"},
{"l":"cps/macros/forest/SelectTreeTransform$.html","n":"run","t":"def run[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](using qctx1: Quotes)(cpsCtx1: TransformationContext[F, T, C], selectTerm: Select): CpsExpr[F, T]","d":"cps/macros/forest/SelectTreeTransform$","k":"def"},
{"l":"cps/macros/forest/SuperTransform.html","n":"SuperTransform","t":"class SuperTransform[F[_], T, C <: CpsMonadContext[F]](cpsCtx: TransformationContext[F, T, C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C])","d":"cps/macros/forest/SuperTransform","k":"class"},
{"l":"cps/macros/forest/SuperTransform.html","n":"run","t":"def run(using Quotes)(superTerm: Super): CpsExpr[F, T]","d":"cps/macros/forest/SuperTransform","k":"def"},
{"l":"cps/macros/forest/ThisTransform.html","n":"ThisTransform","t":"class ThisTransform[F[_], T, C <: CpsMonadContext[F]](cpsCtx: TransformationContext[F, T, C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C])","d":"cps/macros/forest/ThisTransform","k":"class"},
{"l":"cps/macros/forest/ThisTransform.html","n":"run","t":"def run(using Quotes)(thisTerm: This): CpsExpr[F, T]","d":"cps/macros/forest/ThisTransform","k":"def"},
{"l":"cps/macros/forest/ThrowTransform$.html","n":"ThrowTransform","t":"object ThrowTransform","d":"cps/macros/forest/ThrowTransform$","k":"object"},
{"l":"cps/macros/forest/ThrowTransform$.html","n":"run","t":"def run[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type, S <: Throwable : Type](cpsCtx: TransformationContext[F, T, C], ex: Expr[S])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C], evidence$4: Type[S], Quotes): CpsExpr[F, T]","d":"cps/macros/forest/ThrowTransform$","k":"def"},
{"l":"cps/macros/forest/TransformUtil$.html","n":"TransformUtil","t":"object TransformUtil","d":"cps/macros/forest/TransformUtil$","k":"object"},
{"l":"cps/macros/forest/TransformUtil$.html","n":"changeSyms","t":"def changeSyms(using qctx: Quotes)(association: Map[Symbol, Tree], body: Term, owner: Symbol): Term","d":"cps/macros/forest/TransformUtil$","k":"def"},
{"l":"cps/macros/forest/TransformUtil$.html","n":"containsAwait","t":"def containsAwait(using Quotes)(term: Term): Boolean","d":"cps/macros/forest/TransformUtil$","k":"def"},
{"l":"cps/macros/forest/TransformUtil$.html","n":"createFunctionType","t":"def createFunctionType(using Quotes)(argTypes: List[TypeRepr], resultType: TypeRepr): TypeRepr","d":"cps/macros/forest/TransformUtil$","k":"def"},
{"l":"cps/macros/forest/TransformUtil$.html","n":"dummyMapper","t":"def dummyMapper(using Quotes)(t: Term, owner: Symbol): Boolean","d":"cps/macros/forest/TransformUtil$","k":"def"},
{"l":"cps/macros/forest/TransformUtil$.html","n":"ensureTyped","t":"def ensureTyped(using qctx: Quotes)(term: Term, tp: TypeRepr): Term","d":"cps/macros/forest/TransformUtil$","k":"def"},
{"l":"cps/macros/forest/TransformUtil$.html","n":"find","t":"def find(using Quotes)(term: Tree, cond: Tree => Option[Tree]): Option[Tree]","d":"cps/macros/forest/TransformUtil$","k":"def"},
{"l":"cps/macros/forest/TransformUtil$.html","n":"findOtherOwnersIn","t":"def findOtherOwnersIn(using Quotes)(tree: Tree): Map[Int, Tree]","d":"cps/macros/forest/TransformUtil$","k":"def"},
{"l":"cps/macros/forest/TransformUtil$.html","n":"reallyChangeOwner","t":"def reallyChangeOwner(using Quotes)(tree: Tree, owner: Symbol): Tree","d":"cps/macros/forest/TransformUtil$","k":"def"},
{"l":"cps/macros/forest/TransformUtil$.html","n":"safeShow","t":"def safeShow(using Quotes)(t: Tree): String","d":"cps/macros/forest/TransformUtil$","k":"def"},
{"l":"cps/macros/forest/TransformUtil$.html","n":"substituteLambdaParams","t":"def substituteLambdaParams(using qctx: Quotes)(oldParams: List[ValDef], newParams: List[Tree], body: Term, owner: Symbol): Term","d":"cps/macros/forest/TransformUtil$","k":"def"},
{"l":"cps/macros/forest/TransformUtil$.html","n":"veryWiden","t":"def veryWiden(using qctx: Quotes)(tp: TypeRepr): TypeRepr","d":"cps/macros/forest/TransformUtil$","k":"def"},
{"l":"cps/macros/forest/TreeTransformScope.html","n":"TreeTransformScope","t":"trait TreeTransformScope[F[_], CT, CC <: CpsMonadContext[F]] extends CpsTreeScope[F, CT, CC] with KnownTreeFragments[F, CT, CC] with TypeApplyTreeTransform[F, CT, CC] with RootTreeTransform[F, CT, CC] with ApplyTreeTransform[F, CT, CC] with ApplicationHelper[F, CT, CC] with AwaitTreeTransform[F, CT, CC] with SelectTreeTransform[F, CT, CC] with LambdaTreeTransform[F, CT, CC] with MatchTreeTransform[F, CT, CC] with AsyncTreeShifter[F, CT, CC] with RepeatedTreeTransform[F, CT, CC] with InlinedTreeTransform[F, CT, CC] with SelectOuterTreeTransform[F, CT, CC]","d":"cps/macros/forest/TreeTransformScope","k":"trait"},
{"l":"cps/macros/forest/TreeTransformScope.html","n":"ccType","t":"val ccType: Type[CC]","d":"cps/macros/forest/TreeTransformScope","k":"val"},
{"l":"cps/macros/forest/TreeTransformScope.html","n":"cpsCtx","t":"val cpsCtx: TransformationContext[F, CT, CC]","d":"cps/macros/forest/TreeTransformScope","k":"val"},
{"l":"cps/macros/forest/TreeTransformScope.html","n":"ctType","t":"val ctType: Type[CT]","d":"cps/macros/forest/TreeTransformScope","k":"val"},
{"l":"cps/macros/forest/TreeTransformScope.html","n":"fType","t":"val fType: Type[F]","d":"cps/macros/forest/TreeTransformScope","k":"val"},
{"l":"cps/macros/forest/TreeTransformScope.html","n":"isInMonad","t":"def isInMonad(tpe: TypeRepr): Boolean","d":"cps/macros/forest/TreeTransformScope","k":"def"},
{"l":"cps/macros/forest/TreeTransformScope.html","n":"posExpr","t":"def posExpr(t: Term): Expr[Any]","d":"cps/macros/forest/TreeTransformScope","k":"def"},
{"l":"cps/macros/forest/TreeTransformScope.html","n":"posExprs","t":"def posExprs(terms: Term*): Expr[Any]","d":"cps/macros/forest/TreeTransformScope","k":"def"},
{"l":"cps/macros/forest/TreeTransformScope.html","n":"qctx","t":"val qctx: Quotes","d":"cps/macros/forest/TreeTransformScope","k":"val"},
{"l":"cps/macros/forest/TreeTransformScope.html","n":"safeShow","t":"def safeShow(t: Term): String","d":"cps/macros/forest/TreeTransformScope","k":"def"},
{"l":"cps/macros/forest/TreeTransformScope$MessageWithPos.html","n":"MessageWithPos","t":"class MessageWithPos(message: String, pos: Position)","d":"cps/macros/forest/TreeTransformScope$MessageWithPos","k":"class"},
{"l":"cps/macros/forest/TreeTransformScopeInstance.html","n":"TreeTransformScopeInstance","t":"trait TreeTransformScopeInstance[F[_], T, C <: CpsMonadContext[F]](val cpsCtx: TransformationContext[F, T, C])(implicit evidence$4: Type[F], evidence$5: Type[T], evidence$6: Type[C], val qctx: Quotes) extends TreeTransformScope[F, T, C]","d":"cps/macros/forest/TreeTransformScopeInstance","k":"trait"},
{"l":"cps/macros/forest/TreeTransformScopeInstance.html","n":"cpsCtx","t":"val cpsCtx: TransformationContext[F, T, C]","d":"cps/macros/forest/TreeTransformScopeInstance","k":"val"},
{"l":"cps/macros/forest/TreeTransformScopeInstance.html","n":"qctx","t":"val qctx: Quotes","d":"cps/macros/forest/TreeTransformScopeInstance","k":"val"},
{"l":"cps/macros/forest/TryTransform.html","n":"TryTransform","t":"class TryTransform[F[_], T, C <: CpsMonadContext[F]](cpsCtx: TransformationContext[F, T, C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C])","d":"cps/macros/forest/TryTransform","k":"class"},
{"l":"cps/macros/forest/TryTransform.html","n":"run","t":"def run(using Quotes)(origin: Try, body: Term, cases: List[CaseDef], finalizer: Option[Term]): CpsExpr[F, T]","d":"cps/macros/forest/TryTransform","k":"def"},
{"l":"cps/macros/forest/TypeApplyTransform.html","n":"TypeApplyTransform","t":"class TypeApplyTransform[F[_], T, C <: CpsMonadContext[F]](cpsCtx: TransformationContext[F, T, C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C])","d":"cps/macros/forest/TypeApplyTransform","k":"class"},
{"l":"cps/macros/forest/TypeApplyTransform.html","n":"run","t":"def run(using Quotes)(fun: Term, targs: List[TypeTree]): CpsExpr[F, T]","d":"cps/macros/forest/TypeApplyTransform","k":"def"},
{"l":"cps/macros/forest/TypeApplyTreeTransform.html","n":"TypeApplyTreeTransform","t":"trait TypeApplyTreeTransform[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/TypeApplyTreeTransform","k":"trait"},
{"l":"cps/macros/forest/TypeApplyTreeTransform.html","n":"runTypeApply","t":"def runTypeApply(applyTerm: <none>, fun: <none>, targs: List[<none>]): <none>","d":"cps/macros/forest/TypeApplyTreeTransform","k":"def"},
{"l":"cps/macros/forest/TypeApplyTreeTransform$.html","n":"TypeApplyTreeTransform","t":"object TypeApplyTreeTransform","d":"cps/macros/forest/TypeApplyTreeTransform$","k":"object"},
{"l":"cps/macros/forest/TypeApplyTreeTransform$.html","n":"run","t":"def run[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](using qctx1: Quotes)(cpsCtx1: TransformationContext[F, T, C], applyTerm: Term, fun: Term, targs: List[TypeTree]): CpsExpr[F, T]","d":"cps/macros/forest/TypeApplyTreeTransform$","k":"def"},
{"l":"cps/macros/forest/TypedTransform.html","n":"TypedTransform","t":"class TypedTransform[F[_], T, C <: CpsMonadContext[F]](cpsCtx: TransformationContext[F, T, C])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C])","d":"cps/macros/forest/TypedTransform","k":"class"},
{"l":"cps/macros/forest/TypedTransform.html","n":"run","t":"def run(using Quotes)(t: Term, tp: TypeTree): CpsExpr[F, T]","d":"cps/macros/forest/TypedTransform","k":"def"},
{"l":"cps/macros/forest/ValDefTransform$.html","n":"ValDefTransform","t":"object ValDefTransform","d":"cps/macros/forest/ValDefTransform$","k":"object"},
{"l":"cps/macros/forest/ValDefTransform$.html","n":"fromBlock","t":"def fromBlock[F[_] : Type, C <: CpsMonadContext[F] : Type](using Quotes)(cpsCtx: TransformationContext[F, Unit, C], valDef: ValDef): CpsExpr[F, Unit]","d":"cps/macros/forest/ValDefTransform$","k":"def"},
{"l":"cps/macros/forest/ValDefTransform$$RhsFlatMappedCpsExpr.html","n":"RhsFlatMappedCpsExpr","t":"class RhsFlatMappedCpsExpr[F[_], T, V](using thisQuotes: Quotes)(monad: Expr[CpsMonad[F]], prev: Seq[ExprTreeGen], oldValDef: ValDef, cpsRhs: CpsExpr[F, V], next: CpsExpr[F, T])(implicit evidence$3: Type[F], evidence$4: Type[T], evidence$5: Type[V]) extends AsyncCpsExpr[F, T]","d":"cps/macros/forest/ValDefTransform$$RhsFlatMappedCpsExpr","k":"class"},
{"l":"cps/macros/forest/ValDefTransform$$ValWrappedCpsExpr.html","n":"ValWrappedCpsExpr","t":"class ValWrappedCpsExpr[F[_], T, V](using x$1: Quotes)(monad: Expr[CpsMonad[F]], prev: Seq[ExprTreeGen], oldValDef: ValDef, next: CpsExpr[F, T])(implicit evidence$6: Type[F], evidence$7: Type[T], evidence$8: Type[V]) extends AsyncCpsExpr[F, T]","d":"cps/macros/forest/ValDefTransform$$ValWrappedCpsExpr","k":"class"},
{"l":"cps/macros/forest/ValDefTransform$$ValWrappedCpsExpr.html","n":"prependPrev","t":"def prependPrev(using qctx: Quotes)(term: Term): Term","d":"cps/macros/forest/ValDefTransform$$ValWrappedCpsExpr","k":"def"},
{"l":"cps/macros/forest/WhileTransform$.html","n":"WhileTransform","t":"object WhileTransform","d":"cps/macros/forest/WhileTransform$","k":"object"},
{"l":"cps/macros/forest/WhileTransform$.html","n":"run","t":"def run[F[_] : Type, T : Type, C <: CpsMonadContext[F] : Type](cpsCtx: TransformationContext[F, T, C], cond: Expr[Boolean], repeat: Expr[Unit])(implicit evidence$1: Type[F], evidence$2: Type[T], evidence$3: Type[C], Quotes): CpsExpr[F, T]","d":"cps/macros/forest/WhileTransform$","k":"def"},
{"l":"cps/macros/forest/application.html","n":"cps.macros.forest.application","t":"package cps.macros.forest.application","d":"cps/macros/forest/application","k":"package"},
{"l":"cps/macros/forest/application/ApplicationHelper.html","n":"ApplicationHelper","t":"trait ApplicationHelper[F[_], CT, CC <: CpsMonadContext[F]] extends ApplyArgRecordScope[F, CT, CC] with MethodParamsDescriptorScope[F, CT, CC] with ApplyArgBuilderScope[F, CT, CC]","d":"cps/macros/forest/application/ApplicationHelper","k":"trait"},
{"l":"cps/macros/forest/application/ApplyArgBuilderScope.html","n":"ApplyArgBuilderScope","t":"trait ApplyArgBuilderScope[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/application/ApplyArgBuilderScope","k":"trait"},
{"l":"cps/macros/forest/application/ApplyArgBuilderScope$BuildApplyArgsAcc.html","n":"BuildApplyArgsAcc","t":"class BuildApplyArgsAcc(posIndex: Int, paramIndex: Int, wasNamed: Boolean, inRepeat: Boolean, inNamed: Boolean, records: Seq[ApplyArgRecord], filledNamed: Set[Int])","d":"cps/macros/forest/application/ApplyArgBuilderScope$BuildApplyArgsAcc","k":"class"},
{"l":"cps/macros/forest/application/ApplyArgBuilderScope$BuildApplyArgsAcc.html","n":"advance","t":"def advance(record: ApplyArgRecord): BuildApplyArgsAcc","d":"cps/macros/forest/application/ApplyArgBuilderScope$BuildApplyArgsAcc","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgBuilderScope$BuildApplyArgsAcc.html","n":"advanceNamed","t":"def advanceNamed(record: ApplyArgRecord, index: Int): BuildApplyArgsAcc","d":"cps/macros/forest/application/ApplyArgBuilderScope$BuildApplyArgsAcc","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgBuilderScope$O$.html","n":"O","t":"object O","d":"cps/macros/forest/application/ApplyArgBuilderScope$O$","k":"object"},
{"l":"cps/macros/forest/application/ApplyArgBuilderScope$O$.html","n":"buildApplyArgRecord","t":"def buildApplyArgRecord(paramsDescriptor: MethodParamsDescriptor, t: Term, cpsCtx: TransformationContext[F, _, _], acc: BuildApplyArgsAcc): BuildApplyArgsAcc","d":"cps/macros/forest/application/ApplyArgBuilderScope$O$","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgBuilderScope$O$.html","n":"buildApplyArgsRecords","t":"def buildApplyArgsRecords(paramsDescriptor: MethodParamsDescriptor, args: List[Term], cpsCtx: TransformationContext[F, _, _]): List[ApplyArgRecord]","d":"cps/macros/forest/application/ApplyArgBuilderScope$O$","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgBuilderScope$O$.html","n":"buildApplyArgsRecordsAcc","t":"def buildApplyArgsRecordsAcc(paramsDescriptor: MethodParamsDescriptor, args: List[Term], cpsCtx: TransformationContext[F, _, _], acc: BuildApplyArgsAcc): BuildApplyArgsAcc","d":"cps/macros/forest/application/ApplyArgBuilderScope$O$","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgBuilderScope$O$.html","n":"buildCpsTreeApplyArgRecord","t":"def buildCpsTreeApplyArgRecord(paramsDescriptor: MethodParamsDescriptor, t: Term, termCpsTree: CpsTree, cpsCtx: TransformationContext[F, _, _], acc: BuildApplyArgsAcc): BuildApplyArgsAcc","d":"cps/macros/forest/application/ApplyArgBuilderScope$O$","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope.html","n":"ApplyArgRecordScope","t":"trait ApplyArgRecordScope[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/application/ApplyArgRecordScope","k":"trait"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope.html","n":"termIsNoOrderDepended","t":"def termIsNoOrderDepended(x: <none>): Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord.html","n":"ApplyArgByNameRecord","t":"class ApplyArgByNameRecord(term: Term, index: Int, cpsTree: CpsTree, shifted: Boolean) extends ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord","k":"class"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord.html","n":"append","t":"def append(tree: CpsTree): CpsTree","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord.html","n":"hasShiftedLambda","t":"def hasShiftedLambda: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord.html","n":"identArg","t":"def identArg(existsAsync: Boolean): Term","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord.html","n":"isAsync","t":"def isAsync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord.html","n":"noOrderDepended","t":"def noOrderDepended: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord.html","n":"shift","t":"def shift(): ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord.html","n":"shouldBeChangedSync","t":"def shouldBeChangedSync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgByNameRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord.html","n":"ApplyArgInlinedRecord","t":"class ApplyArgInlinedRecord(tree: InlinedCpsTree, nested: ApplyArgRecord) extends ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord","k":"class"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord.html","n":"append","t":"def append(a: CpsTree): CpsTree","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord.html","n":"hasShiftedLambda","t":"def hasShiftedLambda: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord.html","n":"identArg","t":"def identArg(existsAsync: Boolean): Term","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord.html","n":"index","t":"def index: Int","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord.html","n":"isAsync","t":"def isAsync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord.html","n":"noOrderDepended","t":"def noOrderDepended: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord.html","n":"shift","t":"def shift(): ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord.html","n":"shouldBeChangedSync","t":"def shouldBeChangedSync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord.html","n":"term","t":"def term: Term","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgInlinedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord.html","n":"ApplyArgLambdaRecord","t":"class ApplyArgLambdaRecord(term: Term, index: Int, cpsBody: CpsTree, shifted: Boolean, existsLambdaUnshift: Boolean) extends ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord","k":"class"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord.html","n":"append","t":"def append(a: CpsTree): CpsTree","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord.html","n":"extractParamsAndBody","t":"def extractParamsAndBody(): (List[ValDef], Term)","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord.html","n":"hasShiftedLambda","t":"def hasShiftedLambda: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord.html","n":"identArg","t":"def identArg(existsAsync: Boolean): Term","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord.html","n":"isAsync","t":"def isAsync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord.html","n":"noOrderDepended","t":"def noOrderDepended: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord.html","n":"shift","t":"def shift(): ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord.html","n":"shiftedArgExpr","t":"def shiftedArgExpr(existsAsync: Boolean, identType: TypeRepr, params: List[ValDef], body: Term): Term","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord.html","n":"shouldBeChangedSync","t":"def shouldBeChangedSync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgLambdaRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord.html","n":"ApplyArgNamedRecord","t":"class ApplyArgNamedRecord(term: NamedArg, name: String, nested: ApplyArgRecord) extends ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord","k":"class"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord.html","n":"append","t":"def append(a: CpsTree): CpsTree","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord.html","n":"hasShiftedLambda","t":"def hasShiftedLambda: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord.html","n":"identArg","t":"def identArg(existsAsync: Boolean): Term","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord.html","n":"index","t":"def index: Int","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord.html","n":"isAsync","t":"def isAsync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord.html","n":"noOrderDepended","t":"def noOrderDepended: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord.html","n":"shift","t":"def shift(): ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord.html","n":"shouldBeChangedSync","t":"def shouldBeChangedSync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNamedRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord.html","n":"ApplyArgNoPrecalcTermRecord","t":"class ApplyArgNoPrecalcTermRecord(term: Term, index: Int) extends ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord","k":"class"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord.html","n":"hasShiftedLambda","t":"def hasShiftedLambda: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord.html","n":"identArg","t":"def identArg(existsAsync: Boolean): Term","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord.html","n":"isAsync","t":"def isAsync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord.html","n":"noOrderDepended","t":"def noOrderDepended: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord.html","n":"shift","t":"def shift(): ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord.html","n":"shouldBeChangedSync","t":"def shouldBeChangedSync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgNoPrecalcTermRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord.html","n":"ApplyArgPrecalcTermRecord","t":"class ApplyArgPrecalcTermRecord(term: Term, index: Int, termCpsTree: CpsTree, valDef: ValDef, ident: Term) extends ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord","k":"class"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord.html","n":"hasShiftedLambda","t":"def hasShiftedLambda: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord.html","n":"identArg","t":"def identArg(existsAsync: Boolean): Term","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord.html","n":"isAsync","t":"def isAsync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord.html","n":"noOrderDepended","t":"def noOrderDepended: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord.html","n":"shift","t":"def shift(): ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord.html","n":"shouldBeChangedSync","t":"def shouldBeChangedSync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgPrecalcTermRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord.html","n":"ApplyArgRecord","t":"trait ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord","k":"trait"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord.html","n":"append","t":"def append(tree: CpsTree): CpsTree","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord.html","n":"hasShiftedLambda","t":"def hasShiftedLambda: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord.html","n":"identArg","t":"def identArg(existAsync: Boolean): Term","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord.html","n":"index","t":"def index: Int","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord.html","n":"isAsync","t":"def isAsync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord.html","n":"isOrderDepended","t":"def isOrderDepended: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord.html","n":"noOrderDepended","t":"def noOrderDepended: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord.html","n":"shift","t":"def shift(): ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord.html","n":"shouldBeChangedSync","t":"def shouldBeChangedSync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord.html","n":"term","t":"def term: Term","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord.html","n":"usePrepend","t":"def usePrepend(existsAsync: Boolean): Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRecord","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRepeatRecord.html","n":"ApplyArgRepeatRecord","t":"class ApplyArgRepeatRecord(term: Repeated, index: Int, elements: List[ApplyArgRecord], seqTypeTree: TypeTree) extends ApplyArgRecord","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgRepeatRecord","k":"class"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties.html","n":"ApplyArgsSummaryProperties","t":"class ApplyArgsSummaryProperties(step1: ApplyArgsSummaryPropertiesStep1, usePrepend: Boolean)","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties","k":"class"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties.html","n":"hasAsync","t":"def hasAsync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties.html","n":"hasShiftedLambda","t":"def hasShiftedLambda: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties.html","n":"mergeStep2","t":"def mergeStep2(r: ApplyArgRecord): ApplyArgsSummaryProperties","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties.html","n":"mergeStep2Seq","t":"def mergeStep2Seq(seq: Seq[ApplyArgRecord]): ApplyArgsSummaryProperties","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties.html","n":"mergeStep2SeqSeq","t":"def mergeStep2SeqSeq(seqSeq: Seq[Seq[ApplyArgRecord]]): ApplyArgsSummaryProperties","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties.html","n":"shouldBeChangedSync","t":"def shouldBeChangedSync: Boolean","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties$.html","n":"ApplyArgsSummaryProperties","t":"object ApplyArgsSummaryProperties","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties$","k":"object"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties$.html","n":"mergeSeqSeq","t":"def mergeSeqSeq(seqSeq: Seq[Seq[ApplyArgRecord]]): ApplyArgsSummaryProperties","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryProperties$","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryPropertiesStep1.html","n":"ApplyArgsSummaryPropertiesStep1","t":"class ApplyArgsSummaryPropertiesStep1(hasAsync: Boolean, hasShiftedLambda: Boolean, shouldBeChangedSync: Boolean)","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryPropertiesStep1","k":"class"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryPropertiesStep1.html","n":"merge","t":"def merge(other: ApplyArgRecord): ApplyArgsSummaryPropertiesStep1","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryPropertiesStep1","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryPropertiesStep1.html","n":"mergeSeq","t":"def mergeSeq(seq: Seq[ApplyArgRecord]): ApplyArgsSummaryPropertiesStep1","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryPropertiesStep1","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryPropertiesStep1.html","n":"mergeSeqSeq","t":"def mergeSeqSeq(seqSeq: Seq[Seq[ApplyArgRecord]]): ApplyArgsSummaryPropertiesStep1","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryPropertiesStep1","k":"def"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryPropertiesStep1$.html","n":"ApplyArgsSummaryPropertiesStep1","t":"object ApplyArgsSummaryPropertiesStep1","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryPropertiesStep1$","k":"object"},
{"l":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryPropertiesStep1$.html","n":"mergeSeqSeq","t":"def mergeSeqSeq(args: Seq[Seq[ApplyArgRecord]]): ApplyArgsSummaryPropertiesStep1","d":"cps/macros/forest/application/ApplyArgRecordScope$ApplyArgsSummaryPropertiesStep1$","k":"def"},
{"l":"cps/macros/forest/application/MethodParamsDescriptorScope.html","n":"MethodParamsDescriptorScope","t":"trait MethodParamsDescriptorScope[F[_], CT, CC <: CpsMonadContext[F]]","d":"cps/macros/forest/application/MethodParamsDescriptorScope","k":"trait"},
{"l":"cps/macros/forest/application/MethodParamsDescriptorScope$DynaminParamsDescriptor$.html","n":"DynaminParamsDescriptor","t":"object DynaminParamsDescriptor extends MethodParamsDescriptor","d":"cps/macros/forest/application/MethodParamsDescriptorScope$DynaminParamsDescriptor$","k":"object"},
{"l":"cps/macros/forest/application/MethodParamsDescriptorScope$EmptyParamsDescriptor$.html","n":"EmptyParamsDescriptor","t":"object EmptyParamsDescriptor extends MethodParamsDescriptor","d":"cps/macros/forest/application/MethodParamsDescriptorScope$EmptyParamsDescriptor$","k":"object"},
{"l":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor$.html","n":"MethodParamsDescriptor","t":"object MethodParamsDescriptor","d":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor$","k":"object"},
{"l":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor$.html","n":"apply","t":"def apply(fun: Term): MethodParamsDescriptor","d":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor$","k":"def"},
{"l":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor.html","n":"MethodParamsDescriptor","t":"trait MethodParamsDescriptor","d":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor","k":"trait"},
{"l":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor.html","n":"isByName","t":"def isByName(index: Int): Boolean","d":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor","k":"def"},
{"l":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor.html","n":"paramIndex","t":"def paramIndex(name: String): Option[Int]","d":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor","k":"def"},
{"l":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor.html","n":"paramName","t":"def paramName(index: Int): Option[String]","d":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor","k":"def"},
{"l":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor.html","n":"paramType","t":"def paramType(index: Int): Option[TypeRepr]","d":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodParamsDescriptor","k":"def"},
{"l":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodTypeBasedParamsDescriptor.html","n":"MethodTypeBasedParamsDescriptor","t":"class MethodTypeBasedParamsDescriptor(mt: MethodType) extends MethodParamsDescriptor","d":"cps/macros/forest/application/MethodParamsDescriptorScope$MethodTypeBasedParamsDescriptor","k":"class"},
{"l":"cps/macros/misc.html","n":"cps.macros.misc","t":"package cps.macros.misc","d":"cps/macros/misc","k":"package"},
{"l":"cps/macros/misc/MacroError.html","n":"MacroError","t":"class MacroError(msg: String, posExpr: Expr[_], printed: Boolean) extends RuntimeException","d":"cps/macros/misc/MacroError","k":"class"},
{"l":"cps/macros/misc/WithOptExprProxy$.html","n":"WithOptExprProxy","t":"object WithOptExprProxy","d":"cps/macros/misc/WithOptExprProxy$","k":"object"},
{"l":"cps/macros/misc/WithOptExprProxy$.html","n":"apply","t":"def apply[T : Type, S : Type](name: String, originExpr: Expr[T])(buildExpr: Expr[T] => Expr[S])(implicit evidence$1: Type[T], evidence$2: Type[S], Quotes): Expr[S]","d":"cps/macros/misc/WithOptExprProxy$","k":"def"},
{"l":"cps/macros/observatory.html","n":"cps.macros.observatory","t":"package cps.macros.observatory","d":"cps/macros/observatory","k":"package"},
{"l":"cps/macros/observatory/AnalysisQuoteScope.html","n":"AnalysisQuoteScope","t":"trait AnalysisQuoteScope","d":"cps/macros/observatory/AnalysisQuoteScope","k":"trait"},
{"l":"cps/macros/observatory/AnalysisQuoteScope$Analysis.html","n":"Analysis","t":"trait Analysis","d":"cps/macros/observatory/AnalysisQuoteScope$Analysis","k":"trait"},
{"l":"cps/macros/observatory/AnalysisQuoteScope$Analysis.html","n":"afterTreeTraverse","t":"def afterTreeTraverse(flags: AsyncMacroFlags): Unit","d":"cps/macros/observatory/AnalysisQuoteScope$Analysis","k":"def"},
{"l":"cps/macros/observatory/AnalysisQuoteScope$Analysis.html","n":"enabled","t":"var enabled: Boolean","d":"cps/macros/observatory/AnalysisQuoteScope$Analysis","k":"var"},
{"l":"cps/macros/observatory/AnalysisQuoteScope$Analysis.html","n":"visitDone","t":"def visitDone[F[_] : Type](tree: Tree, ctx: ObservationContext[F])(owner: Symbol): Unit","d":"cps/macros/observatory/AnalysisQuoteScope$Analysis","k":"def"},
{"l":"cps/macros/observatory/AnalysisQuoteScope$Analysis.html","n":"visitStart","t":"def visitStart[F[_] : Type](tree: Tree, ctx: ObservationContext[F])(owner: Symbol): Unit","d":"cps/macros/observatory/AnalysisQuoteScope$Analysis","k":"def"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope.html","n":"AutomaticColoringOfEffectsQuoteScope","t":"trait AutomaticColoringOfEffectsQuoteScope","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope","k":"trait"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$AutomaticColoringOfEffects.html","n":"AutomaticColoringOfEffects","t":"class AutomaticColoringOfEffects extends Analysis","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$AutomaticColoringOfEffects","k":"class"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$AutomaticColoringOfEffects.html","n":"awaitSymbol","t":"def awaitSymbol: Symbol","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$AutomaticColoringOfEffects","k":"def"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$AutomaticColoringOfEffects.html","n":"checkApply","t":"def checkApply[F[_] : Type](applyTerm: Term, fun: Term, args: List[Term], tails: List[List[Term]], ctx: ObservationContext[F], owner: Symbol): Unit","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$AutomaticColoringOfEffects","k":"def"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$AutomaticColoringOfEffects.html","n":"checkAwait","t":"def checkAwait[F[_]](term: Term, arg: Term, awaitCpsMonadType: TypeRepr, awaitCpsMonad: Term, ctx: ObservationContext[F], owner: Symbol): Unit","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$AutomaticColoringOfEffects","k":"def"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$AutomaticColoringOfEffects.html","n":"checkFunSelect","t":"def checkFunSelect[F[_] : Type](applyTerm: Term, fun: Term, args: List[Term], obj: Term, method: String, tails: List[List[Term]], ctx: ObservationContext[F], owner: Symbol): Unit","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$AutomaticColoringOfEffects","k":"def"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$AutomaticColoringOfEffects.html","n":"usageRecords","t":"val usageRecords: PerSymbolStorage[ValUsage]","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$AutomaticColoringOfEffects","k":"val"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage.html","n":"ValUsage","t":"class ValUsage(var optValDef: Option[ValDef], inAwaits: ArrayBuffer[Tree], withoutAwaits: ArrayBuffer[Tree], aliases: ArrayBuffer[ValUsage])","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage","k":"class"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage.html","n":"allInAwaits","t":"def allInAwaits: Seq[Tree]","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage","k":"def"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage.html","n":"allWithoutAwaits","t":"def allWithoutAwaits: Seq[Tree]","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage","k":"def"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage.html","n":"definedInside","t":"def definedInside: Boolean","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage","k":"def"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage.html","n":"nInAwaits","t":"def nInAwaits: Int","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage","k":"def"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage.html","n":"nWithoutAwaits","t":"def nWithoutAwaits: Int","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage","k":"def"},
{"l":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage.html","n":"reportCases","t":"def reportCases(): Unit","d":"cps/macros/observatory/AutomaticColoringOfEffectsQuoteScope$ValUsage","k":"def"},
{"l":"cps/macros/observatory/ObservationContextQuoteScope.html","n":"ObservationContextQuoteScope","t":"trait ObservationContextQuoteScope","d":"cps/macros/observatory/ObservationContextQuoteScope","k":"trait"},
{"l":"cps/macros/observatory/ObservationContextQuoteScope$ObservationContext.html","n":"ObservationContext","t":"trait ObservationContext[F[_]]","d":"cps/macros/observatory/ObservationContextQuoteScope$ObservationContext","k":"trait"},
{"l":"cps/macros/observatory/ObservationContextQuoteScope$ObservationContext.html","n":"fTypeRepr","t":"def fTypeRepr: TypeRepr","d":"cps/macros/observatory/ObservationContextQuoteScope$ObservationContext","k":"def"},
{"l":"cps/macros/observatory/ObservationContextQuoteScope$ObservationContext.html","n":"flags","t":"def flags: AsyncMacroFlags","d":"cps/macros/observatory/ObservationContextQuoteScope$ObservationContext","k":"def"},
{"l":"cps/macros/observatory/ObservationContextQuoteScope$ObservationContext.html","n":"scheduleChildrenVisit","t":"def scheduleChildrenVisit(tree: Tree, analysis: Analysis)(owner: Symbol): Unit","d":"cps/macros/observatory/ObservationContextQuoteScope$ObservationContext","k":"def"},
{"l":"cps/macros/observatory/ObservationContextQuoteScope$ObservationContext.html","n":"scheduleVisit","t":"def scheduleVisit(tree: Tree, analysis: Analysis)(owner: Symbol): Unit","d":"cps/macros/observatory/ObservationContextQuoteScope$ObservationContext","k":"def"},
{"l":"cps/macros/observatory/Observatory$.html","n":"Observatory","t":"object Observatory","d":"cps/macros/observatory/Observatory$","k":"object"},
{"l":"cps/macros/observatory/Observatory$.html","n":"apply","t":"def apply(using inQctx: Quotes)(tree: Tree, flags: AsyncMacroFlags): Observatory","d":"cps/macros/observatory/Observatory$","k":"def"},
{"l":"cps/macros/observatory/Observatory$$Scope.html","n":"Scope","t":"trait Scope extends ObservatoryFullQuoteScope","d":"cps/macros/observatory/Observatory$$Scope","k":"trait"},
{"l":"cps/macros/observatory/Observatory$$Scope.html","n":"observatory","t":"val observatory: Observatory","d":"cps/macros/observatory/Observatory$$Scope","k":"val"},
{"l":"cps/macros/observatory/ObservatoryFullQuoteScope.html","n":"ObservatoryFullQuoteScope","t":"trait ObservatoryFullQuoteScope extends ObservatoryQuoteScope with ObservationContextQuoteScope with AnalysisQuoteScope with AutomaticColoringOfEffectsQuoteScope","d":"cps/macros/observatory/ObservatoryFullQuoteScope","k":"trait"},
{"l":"cps/macros/observatory/ObservatoryQuoteScope.html","n":"ObservatoryQuoteScope","t":"trait ObservatoryQuoteScope","d":"cps/macros/observatory/ObservatoryQuoteScope","k":"trait"},
{"l":"cps/macros/observatory/ObservatoryQuoteScope.html","n":"given_Quotes","t":"given given_Quotes: Quotes","d":"cps/macros/observatory/ObservatoryQuoteScope","k":"given"},
{"l":"cps/macros/observatory/ObservatoryQuoteScope.html","n":"qctx","t":"val qctx: Quotes","d":"cps/macros/observatory/ObservatoryQuoteScope","k":"val"},
{"l":"cps/macros/observatory/ObservatoryQuoteScope$Observatory.html","n":"Observatory","t":"class Observatory(tree: Tree, asyncMacroFlags: AsyncMacroFlags)","d":"cps/macros/observatory/ObservatoryQuoteScope$Observatory","k":"class"},
{"l":"cps/macros/observatory/ObservatoryQuoteScope$Observatory.html","n":"allAnalysers","t":"val allAnalysers: Seq[AutomaticColoringOfEffects]","d":"cps/macros/observatory/ObservatoryQuoteScope$Observatory","k":"val"},
{"l":"cps/macros/observatory/ObservatoryQuoteScope$Observatory.html","n":"analyzeTree","t":"def analyzeTree[F[_] : Type]: Unit","d":"cps/macros/observatory/ObservatoryQuoteScope$Observatory","k":"def"},
{"l":"cps/macros/observatory/ObservatoryQuoteScope$Observatory.html","n":"effectColoring","t":"val effectColoring: AutomaticColoringOfEffects","d":"cps/macros/observatory/ObservatoryQuoteScope$Observatory","k":"val"},
{"l":"cps/macros/observatory/PerSymbolStorage.html","n":"PerSymbolStorage","t":"class PerSymbolStorage[T]","d":"cps/macros/observatory/PerSymbolStorage","k":"class"},
{"l":"cps/macros/observatory/PerSymbolStorage.html","n":"foreach","t":"def foreach(f: T => Unit): Unit","d":"cps/macros/observatory/PerSymbolStorage","k":"def"},
{"l":"cps/macros/observatory/PerSymbolStorage.html","n":"get","t":"def get(using Quotes)(symbol: Symbol): Option[T]","d":"cps/macros/observatory/PerSymbolStorage","k":"def"},
{"l":"cps/macros/observatory/PerSymbolStorage.html","n":"getOrUpdate","t":"def getOrUpdate(using Quotes)(symbol: Symbol, defaultValue: => T): T","d":"cps/macros/observatory/PerSymbolStorage","k":"def"},
{"l":"cps/macros/observatory/PerSymbolStorage.html","n":"remove","t":"def remove(using Quotes)(symbol: Symbol): Option[T]","d":"cps/macros/observatory/PerSymbolStorage","k":"def"},
{"l":"cps/macros/observatory/PerSymbolStorage.html","n":"update","t":"def update(using Quotes)(symbol: Symbol, value: T): Unit","d":"cps/macros/observatory/PerSymbolStorage","k":"def"},
{"l":"cps/monads.html","n":"cps.monads","t":"package cps.monads","d":"cps/monads","k":"package"},
{"l":"cps/monads.html","n":"CompletableFutureCpsMonad","t":"given CompletableFutureCpsMonad: CompletableFutureCpsMonad.type","d":"cps/monads","k":"given"},
{"l":"cps/monads.html","n":"FutureAsyncMonad","t":"given FutureAsyncMonad(using ec: ExecutionContext): FutureAsyncMonadAPI","d":"cps/monads","k":"given"},
{"l":"cps/monads.html","n":"fromFutureConversion","t":"given fromFutureConversion[G[_], T](using ex: ExecutionContext, m: CpsAsyncMonad[G]): fromFutureConversion[G, T]","d":"cps/monads","k":"given"},
{"l":"cps/monads.html","n":"futureDiscard","t":"given futureDiscard: futureDiscard.type","d":"cps/monads","k":"given"},
{"l":"cps/monads.html","n":"futureMemoization","t":"given futureMemoization: futureMemoization.type","d":"cps/monads","k":"given"},
{"l":"cps/monads.html","n":"toFutureConversion","t":"given toFutureConversion[F[_], T](using x$1: ExecutionContext, x$2: CpsSchedulingMonad[F]): toFutureConversion[F, T]","d":"cps/monads","k":"given"},
{"l":"cps/monads/CompletableFutureCpsMonad$.html","n":"CompletableFutureCpsMonad","t":"object CompletableFutureCpsMonad extends CpsSchedulingMonad[[T <: <FromJavaObject>] =>> CompletableFuture[T]] with CpsMonadInstanceContext[[T <: <FromJavaObject>] =>> CompletableFuture[T]]","d":"cps/monads/CompletableFutureCpsMonad$","k":"object"},
{"l":"cps/monads/CompletableFutureCpsMonad$.html","n":"adoptCallbackStyle","t":"def adoptCallbackStyle[A](source: Try[A] => Unit => Unit): CompletableFuture[A]","d":"cps/monads/CompletableFutureCpsMonad$","k":"def"},
{"l":"cps/monads/CompletableFutureCpsMonad$.html","n":"error","t":"def error[A](e: Throwable): CompletableFuture[A]","d":"cps/monads/CompletableFutureCpsMonad$","k":"def"},
{"l":"cps/monads/CompletableFutureCpsMonad$.html","n":"flatMap","t":"def flatMap[A, B](fa: CompletableFuture[A])(f: A => CompletableFuture[B]): CompletableFuture[B]","d":"cps/monads/CompletableFutureCpsMonad$","k":"def"},
{"l":"cps/monads/CompletableFutureCpsMonad$.html","n":"map","t":"def map[A, B](fa: CompletableFuture[A])(f: A => B): CompletableFuture[B]","d":"cps/monads/CompletableFutureCpsMonad$","k":"def"},
{"l":"cps/monads/CompletableFutureCpsMonad$.html","n":"pure","t":"def pure[T](t: T): CompletableFuture[T]","d":"cps/monads/CompletableFutureCpsMonad$","k":"def"},
{"l":"cps/monads/CompletableFutureCpsMonad$.html","n":"spawn","t":"def spawn[A](op: => CompletableFuture[A]): CompletableFuture[A]","d":"cps/monads/CompletableFutureCpsMonad$","k":"def"},
{"l":"cps/monads/CompletableFutureCpsMonad$.html","n":"tryCancel","t":"def tryCancel[A](op: CompletableFuture[A]): CompletableFuture[Unit]","d":"cps/monads/CompletableFutureCpsMonad$","k":"def"},
{"l":"cps/monads/FutureAsyncMonadAPI.html","n":"FutureAsyncMonadAPI","t":"class FutureAsyncMonadAPI(using x$1: ExecutionContext) extends CpsSchedulingMonad[Future] with CpsMonadInstanceContext[Future]","d":"cps/monads/FutureAsyncMonadAPI","k":"class"},
{"l":"cps/monads/FutureAsyncMonadAPI.html","n":"F","t":"type F[+T] = Future[T]","d":"cps/monads/FutureAsyncMonadAPI","k":"type"},
{"l":"cps/monads/FutureAsyncMonadAPI.html","n":"WF","t":"type WF[T] = Future[T]","d":"cps/monads/FutureAsyncMonadAPI","k":"type"},
{"l":"cps/monads/FutureAsyncMonadAPI.html","n":"adoptCallbackStyle","t":"def adoptCallbackStyle[A](source: Try[A] => Unit => Unit): Future[A]","d":"cps/monads/FutureAsyncMonadAPI","k":"def"},
{"l":"cps/monads/FutureAsyncMonadAPI.html","n":"error","t":"def error[A](e: Throwable): Future[A]","d":"cps/monads/FutureAsyncMonadAPI","k":"def"},
{"l":"cps/monads/FutureAsyncMonadAPI.html","n":"executionContext","t":"def executionContext: ExecutionContext","d":"cps/monads/FutureAsyncMonadAPI","k":"def"},
{"l":"cps/monads/FutureAsyncMonadAPI.html","n":"flatMap","t":"def flatMap[A, B](fa: Future[A])(f: A => Future[B]): Future[B]","d":"cps/monads/FutureAsyncMonadAPI","k":"def"},
{"l":"cps/monads/FutureAsyncMonadAPI.html","n":"flatMapTry","t":"def flatMapTry[A, B](fa: Future[A])(f: Try[A] => Future[B]): Future[B]","d":"cps/monads/FutureAsyncMonadAPI","k":"def"},
{"l":"cps/monads/FutureAsyncMonadAPI.html","n":"map","t":"def map[A, B](fa: Future[A])(f: A => B): Future[B]","d":"cps/monads/FutureAsyncMonadAPI","k":"def"},
{"l":"cps/monads/FutureAsyncMonadAPI.html","n":"pure","t":"def pure[T](t: T): Future[T]","d":"cps/monads/FutureAsyncMonadAPI","k":"def"},
{"l":"cps/monads/FutureAsyncMonadAPI.html","n":"spawn","t":"def spawn[A](op: => Future[A]): Future[A]","d":"cps/monads/FutureAsyncMonadAPI","k":"def"},
{"l":"cps/monads/FutureAsyncMonadAPI.html","n":"tryCancel","t":"def tryCancel[A](op: Future[A]): Future[Unit]","d":"cps/monads/FutureAsyncMonadAPI","k":"def"},
{"l":"cps/monads/futureDiscard$.html","n":"futureDiscard","t":"object futureDiscard extends WarnValueDiscard[Future]","d":"cps/monads/futureDiscard$","k":"object"},
{"l":"cps/monads/futureMemoization$.html","n":"futureMemoization","t":"object futureMemoization extends Default[Future]","d":"cps/monads/futureMemoization$","k":"object"},
{"l":"cps/runtime.html","n":"cps.runtime","t":"package cps.runtime","d":"cps/runtime","k":"package"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"ArrayOpsAsyncShift","t":"class ArrayOpsAsyncShift[A] extends AsyncShift[ArrayOps[A]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"class"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"collect","t":"def collect[F[_], B](arrOps: ArrayOps[A], monad: CpsMonad[F])(f: PartialFunction[A, F[B]])(using ClassTag[B]): F[Array[B]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"collectFirst","t":"def collectFirst[F[_], B](arrOps: ArrayOps[A], monad: CpsMonad[F])(f: PartialFunction[A, F[B]]): F[Option[B]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"count","t":"def count[F[_]](arr: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean]): F[Int]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"distinctBy","t":"def distinctBy[F[_], B](arr: ArrayOps[A], monad: CpsMonad[F])(f: A => F[B]): F[Array[A]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"dropWhile","t":"def dropWhile[F[_]](arr: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean]): F[Array[A]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"exists","t":"def exists[F[_]](arr: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean]): F[Boolean]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"filter","t":"def filter[F[_]](arrOps: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean]): F[Array[A]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"filterNot","t":"def filterNot[F[_]](arrOps: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean]): F[Array[A]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"find","t":"def find[F[_]](arrOps: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean]): F[Option[A]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"flatMap","t":"def flatMap[F[_], B](arr: ArrayOps[A], monad: CpsMonad[F])(f: A => F[IterableOnce[B]])(using ct: ClassTag[B]): F[Array[B]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"flatMap","t":"def flatMap[F[_], BS, B](arr: ArrayOps[A], monad: CpsMonad[F])(f: A => F[BS])(using asIterableF: BS => F[Iterable[B]], ct: ClassTag[B]): F[Array[B]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"flatMapIterableOnce","t":"def flatMapIterableOnce[F[_], B](arr: ArrayOps[A], monad: CpsMonad[F])(f: A => F[IterableOnce[B]])(using ct: ClassTag[B]): F[Array[B]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"fold","t":"def fold[F[_], A1 >: A](arrOps: ArrayOps[A], monad: CpsMonad[F])(z: A1)(op: (A1, A1) => F[A1]): F[A1]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"foldLeft","t":"def foldLeft[F[_], B](arrOps: ArrayOps[A], monad: CpsMonad[F])(z: B)(op: (B, A) => F[B]): F[B]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"foldRight","t":"def foldRight[F[_], B](arrOps: ArrayOps[A], monad: CpsMonad[F])(z: B)(op: (A, B) => F[B]): F[B]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"forall","t":"def forall[F[_]](arrOps: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean]): F[Boolean]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"foreach","t":"def foreach[F[_], U](arrayOps: ArrayOps[A], monad: CpsMonad[F])(f: A => F[U]): F[Unit]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"foreachParallel","t":"def foreachParallel[F[_], U](arrayOps: ArrayOps[A], monad: CpsMonad[F])(f: A => F[U]): F[Unit]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"foreachSequential","t":"def foreachSequential[F[_], U](arrayOps: ArrayOps[A], monad: CpsMonad[F])(f: A => F[U]): F[Unit]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"groupBy","t":"def groupBy[F[_], K](arrOps: ArrayOps[A], monad: CpsMonad[F])(f: A => F[K]): F[Map[K, Array[A]]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"groupMap","t":"def groupMap[F[_], K, B](arrOps: ArrayOps[A], monad: CpsMonad[F])(key: A => F[K])(f: A => F[B])(using ClassTag[B]): F[Map[K, Array[B]]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"indexWhere","t":"def indexWhere[F[_]](arrOps: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean], from: Int): F[Int]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"lastIndexWhere","t":"def lastIndexWhere[F[_]](arrOps: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean], end: Int): F[Int]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"map","t":"def map[F[_], B](arr: ArrayOps[A], monad: CpsMonad[F])(f: A => F[B])(using ct: ClassTag[B]): F[Array[B]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"partition","t":"def partition[F[_]](arrOps: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean]): F[(Array[A], Array[A])]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"partitionMap","t":"def partitionMap[F[_], A1, A2](arrOps: ArrayOps[A], monad: CpsMonad[F])(f: A => F[Either[A1, A2]])(using ClassTag[A1], ClassTag[A2]): F[(Array[A1], Array[A2])]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"scanLeft","t":"def scanLeft[F[_], B](arrOps: ArrayOps[A], monad: CpsMonad[F])(z: B)(op: (B, A) => F[B])(using ClassTag[B]): F[Array[B]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"scanRight","t":"def scanRight[F[_], B](arrOps: ArrayOps[A], monad: CpsMonad[F])(z: B)(op: (A, B) => F[B])(using ClassTag[B]): F[Array[B]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"span","t":"def span[F[_]](arrayOps: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean]): F[(Array[A], Array[A])]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"takeWhile","t":"def takeWhile[F[_]](arrayOps: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean]): F[Array[A]]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsAsyncShift.html","n":"withFilter","t":"def withFilter[F[_]](arrayOps: ArrayOps[A], monad: CpsMonad[F])(p: A => F[Boolean]): ArrayOpsWithFilterAsyncSubst[F, A]","d":"cps/runtime/ArrayOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ArrayOpsWithFilterAsyncSubst.html","n":"ArrayOpsWithFilterAsyncSubst","t":"class ArrayOpsWithFilterAsyncSubst[F[_], A](ops: ArrayOps[A], monad: CpsMonad[F], p: A => F[Boolean]) extends CallChainAsyncShiftSubst[F, WithFilter[A], F[WithFilter[A]]]","d":"cps/runtime/ArrayOpsWithFilterAsyncSubst","k":"class"},
{"l":"cps/runtime/ArrayOpsWithFilterAsyncSubst.html","n":"flatMap","t":"def flatMap[B : ClassTag](f: A => IterableOnce[B]): F[Array[B]]","d":"cps/runtime/ArrayOpsWithFilterAsyncSubst","k":"def"},
{"l":"cps/runtime/ArrayOpsWithFilterAsyncSubst.html","n":"flatMap","t":"def flatMap[BS, B](f: A => BS)(using asIterable: BS => Iterable[B], m: ClassTag[B]): F[Array[B]]","d":"cps/runtime/ArrayOpsWithFilterAsyncSubst","k":"def"},
{"l":"cps/runtime/ArrayOpsWithFilterAsyncSubst.html","n":"flatMap_async","t":"def flatMap_async[B : ClassTag](f: A => F[IterableOnce[B]]): F[Array[B]]","d":"cps/runtime/ArrayOpsWithFilterAsyncSubst","k":"def"},
{"l":"cps/runtime/ArrayOpsWithFilterAsyncSubst.html","n":"map","t":"def map[B : ClassTag](f: A => B): F[Array[B]]","d":"cps/runtime/ArrayOpsWithFilterAsyncSubst","k":"def"},
{"l":"cps/runtime/ArrayOpsWithFilterAsyncSubst.html","n":"map_async","t":"def map_async[B : ClassTag](f: A => F[B]): F[Array[B]]","d":"cps/runtime/ArrayOpsWithFilterAsyncSubst","k":"def"},
{"l":"cps/runtime/ArrayOpsWithFilterAsyncSubst.html","n":"runBuild","t":"def runBuild[B : ClassTag](it: Iterator[A], builder: ArrayBuilder[B])(step: (A, ArrayBuilder[B]) => F[Unit]): F[ArrayBuilder[B]]","d":"cps/runtime/ArrayOpsWithFilterAsyncSubst","k":"def"},
{"l":"cps/runtime/ArrayOpsWithFilterAsyncSubst.html","n":"startBuild","t":"def startBuild[B : ClassTag](step: (A, ArrayBuilder[B]) => F[Unit]): F[Array[B]]","d":"cps/runtime/ArrayOpsWithFilterAsyncSubst","k":"def"},
{"l":"cps/runtime/ArrayOpsWithFilterAsyncSubst.html","n":"withFilter","t":"def withFilter(q: A => Boolean): ArrayOpsWithFilterAsyncSubst[F, A]","d":"cps/runtime/ArrayOpsWithFilterAsyncSubst","k":"def"},
{"l":"cps/runtime/ArrayOpsWithFilterAsyncSubst.html","n":"withFilter_async","t":"def withFilter_async(q: A => F[Boolean]): ArrayOpsWithFilterAsyncSubst[F, A]","d":"cps/runtime/ArrayOpsWithFilterAsyncSubst","k":"def"},
{"l":"cps/runtime/CallChainAsyncShiftSubst.html","n":"CallChainAsyncShiftSubst","t":"trait CallChainAsyncShiftSubst[F[_], T, FT]","d":"cps/runtime/CallChainAsyncShiftSubst","k":"trait"},
{"l":"cps/runtime/CallChainAsyncShiftSubst.html","n":"_finishChain","t":"def _finishChain: FT","d":"cps/runtime/CallChainAsyncShiftSubst","k":"def"},
{"l":"cps/runtime/CpsMonadSelfAsyncShift.html","n":"CpsMonadSelfAsyncShift","t":"class CpsMonadSelfAsyncShift[F[_], M <: CpsMonad[F]] extends AsyncShift[M]","d":"cps/runtime/CpsMonadSelfAsyncShift","k":"class"},
{"l":"cps/runtime/CpsMonadSelfAsyncShift.html","n":"flatMap","t":"def flatMap[A, B](fMonad: CpsMonad[F])(fa: F[A])(f: A => F[F[B]]): F[F[B]]","d":"cps/runtime/CpsMonadSelfAsyncShift","k":"def"},
{"l":"cps/runtime/CpsMonadSelfAsyncShift.html","n":"map","t":"def map[A, B](fMonad: CpsMonad[F])(fa: F[A])(f: A => F[B]): F[F[B]]","d":"cps/runtime/CpsMonadSelfAsyncShift","k":"def"},
{"l":"cps/runtime/DelayedWithFilter.html","n":"DelayedWithFilter","t":"class DelayedWithFilter[F[_], A, C <: ([X] =>> Iterable[X] & IterableOps[X, C, C[X]]), CA <: C[A]](c: CA, m: CpsMonad[F], p: A => F[Boolean]) extends CallChainAsyncShiftSubst[F, WithFilter[A, C], F[WithFilter[A, C]]]","d":"cps/runtime/DelayedWithFilter","k":"class"},
{"l":"cps/runtime/DelayedWithFilter.html","n":"_finishChain","t":"def _finishChain: F[WithFilter[A, C]]","d":"cps/runtime/DelayedWithFilter","k":"def"},
{"l":"cps/runtime/DelayedWithFilter.html","n":"flatMap","t":"def flatMap[B](f: A => IterableOnce[B]): F[C[B]]","d":"cps/runtime/DelayedWithFilter","k":"def"},
{"l":"cps/runtime/DelayedWithFilter.html","n":"flatMap_async","t":"def flatMap_async[B](f: A => F[IterableOnce[B]]): F[C[B]]","d":"cps/runtime/DelayedWithFilter","k":"def"},
{"l":"cps/runtime/DelayedWithFilter.html","n":"foreach","t":"def foreach[U](f: A => U): F[Unit]","d":"cps/runtime/DelayedWithFilter","k":"def"},
{"l":"cps/runtime/DelayedWithFilter.html","n":"foreach_async","t":"def foreach_async[U](f: A => F[U]): F[Unit]","d":"cps/runtime/DelayedWithFilter","k":"def"},
{"l":"cps/runtime/DelayedWithFilter.html","n":"map","t":"def map[B](f: A => B): F[C[B]]","d":"cps/runtime/DelayedWithFilter","k":"def"},
{"l":"cps/runtime/DelayedWithFilter.html","n":"map_async","t":"def map_async[B](f: A => F[B]): F[C[B]]","d":"cps/runtime/DelayedWithFilter","k":"def"},
{"l":"cps/runtime/DelayedWithFilter.html","n":"runScan","t":"def runScan[B](iterateEffect: (Builder[B, C[B]], A) => Unit): F[C[B]]","d":"cps/runtime/DelayedWithFilter","k":"def"},
{"l":"cps/runtime/DelayedWithFilter.html","n":"runScanF","t":"def runScanF[B](iterateChange: (Builder[B, C[B]], A) => F[Builder[B, C[B]]]): F[C[B]]","d":"cps/runtime/DelayedWithFilter","k":"def"},
{"l":"cps/runtime/DelayedWithFilter.html","n":"withFilter","t":"def withFilter(q: A => Boolean): DelayedWithFilter[F, A, C, CA]","d":"cps/runtime/DelayedWithFilter","k":"def"},
{"l":"cps/runtime/DelayedWithFilter.html","n":"withFilter_async","t":"def withFilter_async(q: A => F[Boolean]): DelayedWithFilter[F, A, C, CA]","d":"cps/runtime/DelayedWithFilter","k":"def"},
{"l":"cps/runtime/Function1AndThenCallChainSubst.html","n":"Function1AndThenCallChainSubst","t":"class Function1AndThenCallChainSubst[F[_], A, B, C](f: A => B, g: B => F[C], m: CpsMonad[F]) extends CallChainAsyncShiftSubst[F, A => C, A => F[C]]","d":"cps/runtime/Function1AndThenCallChainSubst","k":"class"},
{"l":"cps/runtime/Function1AndThenCallChainSubst.html","n":"_finishChain","t":"def _finishChain: A => F[C]","d":"cps/runtime/Function1AndThenCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1AndThenCallChainSubst.html","n":"andThen","t":"def andThen[D](h: C => D): Function1AndThenCallChainSubst[F, A, B, D]","d":"cps/runtime/Function1AndThenCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1AndThenCallChainSubst.html","n":"andThen_async","t":"def andThen_async[D](h: C => F[D]): Function1AndThenCallChainSubst[F, A, B, D]","d":"cps/runtime/Function1AndThenCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1AndThenCallChainSubst.html","n":"apply","t":"def apply(x: A): F[C]","d":"cps/runtime/Function1AndThenCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1AndThenCallChainSubst.html","n":"compose","t":"def compose[Z](h: Z => A): Function1AndThenCallChainSubst[F, Z, B, C]","d":"cps/runtime/Function1AndThenCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1AndThenCallChainSubst.html","n":"compose_async","t":"def compose_async[Z](h: Z => F[A]): Function1ComposeAndThenCallChainSubst[F, Z, A, C]","d":"cps/runtime/Function1AndThenCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1AsyncShift.html","n":"Function1AsyncShift","t":"class Function1AsyncShift[T, R] extends AsyncShift[T => R]","d":"cps/runtime/Function1AsyncShift","k":"class"},
{"l":"cps/runtime/Function1AsyncShift.html","n":"andThen","t":"def andThen[F[_], A](f: T => R, m: CpsMonad[F])(g: R => F[A]): Function1AndThenCallChainSubst[F, T, R, A]","d":"cps/runtime/Function1AsyncShift","k":"def"},
{"l":"cps/runtime/Function1AsyncShift.html","n":"compose","t":"def compose[F[_], A](f: T => R, m: CpsMonad[F])(g: A => F[T]): Function1ComposeCallChainSubst[F, T, R, A]","d":"cps/runtime/Function1AsyncShift","k":"def"},
{"l":"cps/runtime/Function1ComposeAndThenCallChainSubst.html","n":"Function1ComposeAndThenCallChainSubst","t":"class Function1ComposeAndThenCallChainSubst[F[_], A, B, C](f: A => F[B], g: B => F[C], m: CpsMonad[F]) extends CallChainAsyncShiftSubst[F, A => C, A => F[C]]","d":"cps/runtime/Function1ComposeAndThenCallChainSubst","k":"class"},
{"l":"cps/runtime/Function1ComposeAndThenCallChainSubst.html","n":"_finishChain","t":"def _finishChain: A => F[C]","d":"cps/runtime/Function1ComposeAndThenCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1ComposeAndThenCallChainSubst.html","n":"andThen","t":"def andThen[D](h: C => D): Function1ComposeAndThenCallChainSubst[F, A, B, D]","d":"cps/runtime/Function1ComposeAndThenCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1ComposeAndThenCallChainSubst.html","n":"andThen_async","t":"def andThen_async[D](h: C => F[D]): Function1ComposeAndThenCallChainSubst[F, A, B, D]","d":"cps/runtime/Function1ComposeAndThenCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1ComposeAndThenCallChainSubst.html","n":"apply","t":"def apply(x: A): F[C]","d":"cps/runtime/Function1ComposeAndThenCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1ComposeAndThenCallChainSubst.html","n":"compose","t":"def compose[Z](h: Z => A): Function1ComposeAndThenCallChainSubst[F, Z, B, C]","d":"cps/runtime/Function1ComposeAndThenCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1ComposeAndThenCallChainSubst.html","n":"compose_async","t":"def compose_async[Z](h: Z => F[A]): Function1ComposeAndThenCallChainSubst[F, Z, B, C]","d":"cps/runtime/Function1ComposeAndThenCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1ComposeCallChainSubst.html","n":"Function1ComposeCallChainSubst","t":"class Function1ComposeCallChainSubst[F[_], A, B, Z](f: A => B, g: Z => F[A], m: CpsMonad[F]) extends CallChainAsyncShiftSubst[F, Z => B, Z => F[B]]","d":"cps/runtime/Function1ComposeCallChainSubst","k":"class"},
{"l":"cps/runtime/Function1ComposeCallChainSubst.html","n":"_finishChain","t":"def _finishChain: Z => F[B]","d":"cps/runtime/Function1ComposeCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1ComposeCallChainSubst.html","n":"andThen","t":"def andThen[C](h: B => C): Function1ComposeCallChainSubst[F, A, C, Z]","d":"cps/runtime/Function1ComposeCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1ComposeCallChainSubst.html","n":"andThen_async","t":"def andThen_async[C](h: B => F[C]): Function1ComposeAndThenCallChainSubst[F, Z, A, C]","d":"cps/runtime/Function1ComposeCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1ComposeCallChainSubst.html","n":"apply","t":"def apply(x: Z): F[B]","d":"cps/runtime/Function1ComposeCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1ComposeCallChainSubst.html","n":"compose","t":"def compose[Y](h: Y => Z): Function1ComposeCallChainSubst[F, A, B, Y]","d":"cps/runtime/Function1ComposeCallChainSubst","k":"def"},
{"l":"cps/runtime/Function1ComposeCallChainSubst.html","n":"compose_async","t":"def compose_async[Y](h: Y => F[Z]): Function1ComposeCallChainSubst[F, A, B, Y]","d":"cps/runtime/Function1ComposeCallChainSubst","k":"def"},
{"l":"cps/runtime/IndexedSeqAsyncShift.html","n":"IndexedSeqAsyncShift","t":"class IndexedSeqAsyncShift[A, C <: ([X] =>> IndexedSeq[X] & IndexedSeqOps[X, C, C[X]]), CA <: C[A]] extends SeqAsyncShift[A, C, CA]","d":"cps/runtime/IndexedSeqAsyncShift","k":"class"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"IterableAsyncShift","t":"class IterableAsyncShift[A, CA <: Iterable[A]]() extends AsyncShift[CA]","d":"cps/runtime/IterableAsyncShift","k":"class"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"collectFirst","t":"def collectFirst[F[_], B](c: CA, monad: CpsMonad[F])(pf: PartialFunction[A, F[B]]): F[Option[B]]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"corresponds","t":"def corresponds[F[_], B](c: CA, monad: CpsMonad[F])(that: IterableOnce[B])(p: (A, B) => F[Boolean]): F[Boolean]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"count","t":"def count[F[_]](c: CA, monad: CpsMonad[F])(p: A => F[Boolean]): F[Int]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"exists","t":"def exists[F[_]](c: CA, monad: CpsMonad[F])(p: A => F[Boolean]): F[Boolean]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"find","t":"def find[F[_]](c: CA, monad: CpsMonad[F])(p: A => F[Boolean]): F[Option[A]]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"fold","t":"def fold[F[_], A1 >: A](c: CA, monad: CpsMonad[F])(z: A1)(op: (A1, A1) => F[A1]): F[A1]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"foldLeft","t":"def foldLeft[F[_], B](c: CA, monad: CpsMonad[F])(z: B)(op: (B, A) => F[B]): F[B]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"foldRight","t":"def foldRight[F[_], B](c: CA, monad: CpsMonad[F])(z: B)(op: (A, B) => F[B]): F[B]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"forall","t":"def forall[F[_]](c: CA, monad: CpsMonad[F])(p: A => F[Boolean]): F[Boolean]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"foreach","t":"def foreach[F[_], U](c: CA, monad: CpsMonad[F])(f: A => F[U]): F[Unit]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"groupMapReduce","t":"def groupMapReduce[F[_], K, B](c: CA, monad: CpsMonad[F])(key: A => F[K])(f: A => F[B])(reduce: (B, B) => F[B]): F[Map[K, B]]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"maxBy","t":"def maxBy[F[_], B](c: CA, monad: CpsTryMonad[F])(f: A => F[B])(implicit cmp: Ordering[B]): F[A]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"maxByOpOption","t":"def maxByOpOption[F[_], B](c: CA, monad: CpsMonad[F])(f: A => F[B])(cmp: (B, B) => Int): F[Option[A]]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"maxByOption","t":"def maxByOption[F[_], B](c: CA, monad: CpsMonad[F])(f: A => F[B])(implicit cmp: Ordering[B]): F[Option[A]]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"minBy","t":"def minBy[F[_], B](c: CA, monad: CpsTryMonad[F])(f: A => F[B])(implicit cmp: Ordering[B]): F[A]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"minByOption","t":"def minByOption[F[_], B](c: CA, monad: CpsMonad[F])(f: A => F[B])(implicit cmp: Ordering[B]): F[Option[A]]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"reduce","t":"def reduce[F[_], B >: A](c: CA, monad: CpsTryMonad[F])(op: (B, B) => F[B]): F[B]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"reduceLeft","t":"def reduceLeft[F[_], B >: A](c: CA, monad: CpsTryMonad[F])(op: (B, A) => F[B]): F[B]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"reduceLeftOption","t":"def reduceLeftOption[F[_], B >: A](c: CA, monad: CpsTryMonad[F])(op: (B, A) => F[B]): F[Option[B]]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"reduceOption","t":"def reduceOption[F[_], B >: A](c: CA, monad: CpsTryMonad[F])(op: (B, B) => F[B]): F[Option[B]]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"reduceRight","t":"def reduceRight[F[_], B >: A](c: CA, monad: CpsTryMonad[F])(op: (A, B) => F[B]): F[B]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"reduceRightOption","t":"def reduceRightOption[F[_], B >: A](c: CA, monad: CpsTryMonad[F])(op: (A, B) => F[B]): F[Option[B]]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"shiftedFold","t":"def shiftedFold[F[_], S, B, R](c: CA, monad: CpsMonad[F])(prolog: S, action: A => F[B], acc: (S, A, B) => S, epilog: S => R): F[R]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"shiftedStateFold","t":"def shiftedStateFold[F[_], S, R](c: CA, monad: CpsMonad[F])(prolog: S, acc: (S, A) => F[S], epilog: S => R): F[R]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableAsyncShift.html","n":"shiftedWhile","t":"def shiftedWhile[F[_], S, R](c: CA, monad: CpsMonad[F])(prolog: S, condition: A => F[Boolean], acc: (S, Boolean, A) => S, epilog: S => R): F[R]","d":"cps/runtime/IterableAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"IterableOpsAsyncShift","t":"class IterableOpsAsyncShift[A, C <: ([X] =>> Iterable[X] & IterableOps[X, C, C[X]]), CA <: C[A]]() extends IterableAsyncShift[A, CA]","d":"cps/runtime/IterableOpsAsyncShift","k":"class"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"_cpsWithFilterSubst","t":"def _cpsWithFilterSubst(ca: CA, predicate: A => Boolean): WithFilterSubstAsyncShift[A, C, CA]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"collect","t":"def collect[F[_], B](c: CA, monad: CpsMonad[F])(pf: PartialFunction[A, F[B]]): F[C[B]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"dropWhile","t":"def dropWhile[F[_]](c: CA, monad: CpsMonad[F])(p: A => F[Boolean]): F[C[A]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"filter","t":"def filter[F[_]](c: CA, monad: CpsMonad[F])(p: A => F[Boolean]): F[C[A]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"filterNot","t":"def filterNot[F[_]](c: CA, monad: CpsMonad[F])(p: A => F[Boolean]): F[C[A]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"flatMap","t":"def flatMap[F[_], B](c: CA, monad: CpsMonad[F])(f: A => F[IterableOnce[B]]): F[C[B]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"flatten","t":"def flatten[F[_], B](c: CA, monad: CpsMonad[F])(implicit asIterable: A => F[IterableOnce[B]]): F[C[B]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"groupBy","t":"def groupBy[F[_], K](c: CA, monad: CpsMonad[F])(f: A => F[K]): F[Map[K, C[A]]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"groupMap","t":"def groupMap[F[_], K, B](c: CA, monad: CpsMonad[F])(key: A => F[K])(f: A => F[B]): F[Map[K, C[B]]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"map","t":"def map[F[_], B](c: CA, monad: CpsMonad[F])(f: A => F[B]): F[C[B]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"partition","t":"def partition[F[_]](c: CA, monad: CpsMonad[F])(p: A => F[Boolean]): F[(C[A], C[A])]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"partitionMap","t":"def partitionMap[F[_], A1, A2](c: CA, monad: CpsMonad[F])(f: A => F[Either[A1, A2]]): F[(C[A1], C[A2])]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"scanLeft","t":"def scanLeft[F[_], B](c: CA, monad: CpsMonad[F])(z: B)(op: (B, A) => F[B]): F[C[B]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"scanRight","t":"def scanRight[F[_], B](c: CA, monad: CpsMonad[F])(z: B)(op: (A, B) => F[B]): F[C[B]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"span","t":"def span[F[_]](c: CA, monad: CpsMonad[F])(p: A => F[Boolean]): F[(C[A], C[A])]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"takeWhile","t":"def takeWhile[F[_]](c: CA, monad: CpsMonad[F])(p: A => F[Boolean]): F[C[A]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"tapEach","t":"def tapEach[F[_], U](c: CA, monad: CpsMonad[F])(f: A => F[U]): F[C[A]]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/IterableOpsAsyncShift.html","n":"withFilter","t":"def withFilter[F[_]](c: CA, m: CpsMonad[F])(p: A => F[Boolean]): DelayedWithFilter[F, A, C, CA]","d":"cps/runtime/IterableOpsAsyncShift","k":"def"},
{"l":"cps/runtime/ListAsyncShift.html","n":"ListAsyncShift","t":"class ListAsyncShift[A] extends IterableOpsAsyncShift[A, List, List[A]] with AsyncShift[List[A]]","d":"cps/runtime/ListAsyncShift","k":"class"},
{"l":"cps/runtime/MapOpsAsyncShift.html","n":"MapOpsAsyncShift","t":"class MapOpsAsyncShift[K, V, CC <: ([KX, VX] =>> MapOps[KX, VX, CC, CC[KX, VX]] & CI[(KX, VX)]), CI <: ([X] =>> Iterable[X] & IterableOps[X, CI, CI[X]]), CKV <: CC[K, V] & PartialFunction[K, V]]() extends IterableOpsAsyncShift[(K, V), CI, CKV] with PartialFunctionAsyncShiftBase[K, V, CKV] with AsyncShift[CKV]","d":"cps/runtime/MapOpsAsyncShift","k":"class"},
{"l":"cps/runtime/MapOpsAsyncShift.html","n":"flatMap","t":"def flatMap[F[_], K2, V2](c: CKV, m: CpsMonad[F])(f: (K, V) => F[IterableOnce[(K2, V2)]]): F[CC[K2, V2]]","d":"cps/runtime/MapOpsAsyncShift","k":"def"},
{"l":"cps/runtime/MapOpsAsyncShift.html","n":"foreachEntry","t":"def foreachEntry[F[_], U](c: CKV, m: CpsMonad[F])(f: (K, V) => F[U]): F[Unit]","d":"cps/runtime/MapOpsAsyncShift","k":"def"},
{"l":"cps/runtime/MapOpsAsyncShift.html","n":"getOrElse","t":"def getOrElse[F[_], V1 >: V](c: CKV, m: CpsMonad[F])(key: K, default: () => F[V1]): F[V1]","d":"cps/runtime/MapOpsAsyncShift","k":"def"},
{"l":"cps/runtime/MapOpsAsyncShift.html","n":"map","t":"def map[F[_], K2, V2](c: CKV, m: CpsMonad[F])(f: (K, V) => F[(K2, V2)]): F[CC[K2, V2]]","d":"cps/runtime/MapOpsAsyncShift","k":"def"},
{"l":"cps/runtime/OptionAsyncShift.html","n":"OptionAsyncShift","t":"class OptionAsyncShift[T] extends AsyncShift[Option[T]]","d":"cps/runtime/OptionAsyncShift","k":"class"},
{"l":"cps/runtime/OptionAsyncShift.html","n":"filter","t":"def filter[F[_]](o: Option[T], m: CpsMonad[F])(p: T => F[Boolean]): F[Option[T]]","d":"cps/runtime/OptionAsyncShift","k":"def"},
{"l":"cps/runtime/OptionAsyncShift.html","n":"flatMap","t":"def flatMap[F[_], U](o: Option[T], m: CpsMonad[F])(f: T => F[Option[U]]): F[Option[U]]","d":"cps/runtime/OptionAsyncShift","k":"def"},
{"l":"cps/runtime/OptionAsyncShift.html","n":"foreach","t":"def foreach[F[_], U](o: Option[T], m: CpsMonad[F])(f: T => F[U]): F[Unit]","d":"cps/runtime/OptionAsyncShift","k":"def"},
{"l":"cps/runtime/OptionAsyncShift.html","n":"getOrElse","t":"def getOrElse[F[_], U >: T](o: Option[T], m: CpsMonad[F])(default: () => F[U]): F[U]","d":"cps/runtime/OptionAsyncShift","k":"def"},
{"l":"cps/runtime/OptionAsyncShift.html","n":"map","t":"def map[F[_], U](o: Option[T], m: CpsMonad[F])(f: T => F[U]): F[Option[U]]","d":"cps/runtime/OptionAsyncShift","k":"def"},
{"l":"cps/runtime/OptionAsyncShift.html","n":"orElse","t":"def orElse[F[_], U >: T](o: Option[T], m: CpsMonad[F])(default: () => F[Option[U]]): F[Option[U]]","d":"cps/runtime/OptionAsyncShift","k":"def"},
{"l":"cps/runtime/PartialFunctionAsyncShift.html","n":"PartialFunctionAsyncShift","t":"class PartialFunctionAsyncShift[T, R] extends PartialFunctionAsyncShiftBase[T, R, PartialFunction[T, R]]","d":"cps/runtime/PartialFunctionAsyncShift","k":"class"},
{"l":"cps/runtime/PartialFunctionAsyncShiftBase.html","n":"PartialFunctionAsyncShiftBase","t":"trait PartialFunctionAsyncShiftBase[T, R, C <: PartialFunction[T, R]] extends AsyncShift[C]","d":"cps/runtime/PartialFunctionAsyncShiftBase","k":"trait"},
{"l":"cps/runtime/PartialFunctionAsyncShiftBase.html","n":"andThen","t":"def andThen[F[_], A](f: PartialFunction[T, R], m: CpsMonad[F])(g: R => F[A]): PartialFunctionCallChainSubst[F, T, A]","d":"cps/runtime/PartialFunctionAsyncShiftBase","k":"def"},
{"l":"cps/runtime/PartialFunctionAsyncShiftBase.html","n":"applyOrElse","t":"def applyOrElse[F[_], A1 <: T, B1 >: R](f: PartialFunction[T, R], m: CpsMonad[F])(x1: A1, default: A1 => F[B1]): F[B1]","d":"cps/runtime/PartialFunctionAsyncShiftBase","k":"def"},
{"l":"cps/runtime/PartialFunctionAsyncShiftBase.html","n":"compose","t":"def compose[F[_], A](f: PartialFunction[T, R], m: CpsMonad[F])(g: A => F[T]): PartialFunctionCallChainSubst[F, A, R]","d":"cps/runtime/PartialFunctionAsyncShiftBase","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"PartialFunctionCallChainSubst","t":"trait PartialFunctionCallChainSubst[F[_], A, B](m: CpsMonad[F]) extends CallChainAsyncShiftSubst[F, PartialFunction[A, B], A => F[B]]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"trait"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"_finishChain","t":"def _finishChain: A => F[B]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"andThen","t":"def andThen[C](g: PartialFunctionCallChainSubst[F, B, C]): PartialFunctionCallChainSubst[F, A, C]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"andThen","t":"def andThen[C](g: B => C): PartialFunctionCallChainSubst[F, A, C]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"andThen","t":"def andThen[C](g: PartialFunction[B, C]): PartialFunctionCallChainSubst[F, A, C]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"andThen_async","t":"def andThen_async[C](g: B => F[C]): PartialFunctionCallChainSubst[F, A, C]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"andThen_async","t":"def andThen_async[C](g: PartialFunction[B, F[C]]): PartialFunctionCallChainSubst[F, A, C]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"apply","t":"def apply(x: A): F[B]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"applyContOrElse","t":"def applyContOrElse[A1 <: A, C](x: A1, ifApply: B => C, ifNot: A1 => C): F[C]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"applyContOrElse_async","t":"def applyContOrElse_async[A1 <: A, C](x: A1, ifApply: B => F[C], ifNot: A1 => F[C]): F[C]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"applyOrElse","t":"def applyOrElse[A1 <: A, B1 >: B](x: A1, default: A1 => B1): F[B1]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"applyOrElse_async","t":"def applyOrElse_async[A1 <: A, B1 >: B](x: A1, default: A1 => F[B1]): F[B1]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"compose","t":"def compose[Z](g: PartialFunction[Z, A]): PartialFunctionCallChainSubst[F, Z, B]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"compose","t":"def compose[Z](g: Z => A): PartialFunctionCallChainSubst[F, Z, B]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"compose_async","t":"def compose_async[Z](g: PartialFunction[Z, F[A]]): PartialFunctionCallChainSubst[F, Z, B]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"compose_async","t":"def compose_async[Z](g: Z => F[A]): PartialFunctionCallChainSubst[F, Z, B]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"isDefinedAt","t":"def isDefinedAt(x: A): F[Boolean]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"lift","t":"def lift: CallChainAsyncShiftSubst[F, A => Option[B], A => F[Option[B]]]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst.html","n":"orElse","t":"def orElse[A1 <: A, B1 >: B](g: PartialFunctionCallChainSubst[F, A1, B1]): PartialFunctionCallChainSubst[F, A1, B1]","d":"cps/runtime/PartialFunctionCallChainSubst","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst$.html","n":"PartialFunctionCallChainSubst","t":"object PartialFunctionCallChainSubst","d":"cps/runtime/PartialFunctionCallChainSubst$","k":"object"},
{"l":"cps/runtime/PartialFunctionCallChainSubst$.html","n":"partialMapped","t":"def partialMapped[F[_], A, B](m: CpsMonad[F], f: PartialFunction[A, F[B]]): PartialFunctionCallChainSubst[F, A, B]","d":"cps/runtime/PartialFunctionCallChainSubst$","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst$.html","n":"partialPlain","t":"def partialPlain[F[_], A, B](m: CpsMonad[F], f: PartialFunction[A, B]): PartialFunctionCallChainSubst[F, A, B]","d":"cps/runtime/PartialFunctionCallChainSubst$","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst$.html","n":"totalMapped","t":"def totalMapped[F[_], A, B](m: CpsMonad[F], f: A => F[B]): PartialFunctionCallChainSubst[F, A, B]","d":"cps/runtime/PartialFunctionCallChainSubst$","k":"def"},
{"l":"cps/runtime/PartialFunctionCallChainSubst$.html","n":"totalPlain","t":"def totalPlain[F[_], A, B](m: CpsMonad[F], f: A => B): PartialFunctionCallChainSubst[F, A, B]","d":"cps/runtime/PartialFunctionCallChainSubst$","k":"def"},
{"l":"cps/runtime/PartialFunctionHelper$.html","n":"PartialFunctionHelper","t":"object PartialFunctionHelper","d":"cps/runtime/PartialFunctionHelper$","k":"object"},
{"l":"cps/runtime/PartialFunctionHelper$.html","n":"create","t":"def create[X, Y](isDefinedAtF: X => Boolean, applyF: X => Y): PartialFunction[X, Y]","d":"cps/runtime/PartialFunctionHelper$","k":"def"},
{"l":"cps/runtime/RangeAsyncShift.html","n":"RangeAsyncShift","t":"class RangeAsyncShift[R <: Range]() extends SeqAsyncShift[Int, IndexedSeq, R]","d":"cps/runtime/RangeAsyncShift","k":"class"},
{"l":"cps/runtime/SeqAsyncShift.html","n":"SeqAsyncShift","t":"class SeqAsyncShift[A, C <: ([X] =>> Seq[X] & SeqOps[X, C, C[X]]), CA <: C[A]] extends IterableOpsAsyncShift[A, C, CA] with PartialFunctionAsyncShiftBase[Int, A, CA]","d":"cps/runtime/SeqAsyncShift","k":"class"},
{"l":"cps/runtime/SeqAsyncShift.html","n":"advanceIterator","t":"def advanceIterator(c: CA, from: Int): (Iterator[A], Int)","d":"cps/runtime/SeqAsyncShift","k":"def"},
{"l":"cps/runtime/SeqAsyncShift.html","n":"aggregate","t":"def aggregate[F[_], B](c: C[A], m: CpsMonad[F])(z: () => F[B])(seqop: (B, A) => F[B], combop: (B, B) => F[B]): F[B]","d":"cps/runtime/SeqAsyncShift","k":"def"},
{"l":"cps/runtime/SeqAsyncShift.html","n":"distinctBy","t":"def distinctBy[F[_], B](c: CA, m: CpsMonad[F])(f: A => F[B]): F[C[A]]","d":"cps/runtime/SeqAsyncShift","k":"def"},
{"l":"cps/runtime/SeqAsyncShift.html","n":"indexWhere","t":"def indexWhere[F[_]](c: CA, m: CpsMonad[F])(p: A => F[Boolean], from: Int): F[Int]","d":"cps/runtime/SeqAsyncShift","k":"def"},
{"l":"cps/runtime/SeqAsyncShift.html","n":"indexWhere","t":"def indexWhere[F[_]](c: CA, m: CpsMonad[F])(p: A => F[Boolean]): F[Int]","d":"cps/runtime/SeqAsyncShift","k":"def"},
{"l":"cps/runtime/SeqAsyncShift.html","n":"segmentLength","t":"def segmentLength[F[_]](c: CA, m: CpsMonad[F])(p: A => F[Boolean], from: Int): F[Int]","d":"cps/runtime/SeqAsyncShift","k":"def"},
{"l":"cps/runtime/SeqAsyncShift.html","n":"segmentLength","t":"def segmentLength[F[_]](c: CA, m: CpsMonad[F])(p: A => F[Boolean]): F[Int]","d":"cps/runtime/SeqAsyncShift","k":"def"},
{"l":"cps/runtime/WhileHelper$.html","n":"WhileHelper","t":"object WhileHelper","d":"cps/runtime/WhileHelper$","k":"object"},
{"l":"cps/runtime/WhileHelper$.html","n":"w01","t":"def w01[F[_]](m: CpsMonad[F], cond: => Boolean, repeat: => F[Unit]): F[Unit]","d":"cps/runtime/WhileHelper$","k":"def"},
{"l":"cps/runtime/WhileHelper$.html","n":"w10","t":"def w10[F[_]](m: CpsMonad[F], cond: => F[Boolean], repeat: => Unit): F[Unit]","d":"cps/runtime/WhileHelper$","k":"def"},
{"l":"cps/runtime/WhileHelper$.html","n":"w11","t":"def w11[F[_]](m: CpsMonad[F], cond: => F[Boolean], repeat: => F[Unit]): F[Unit]","d":"cps/runtime/WhileHelper$","k":"def"},
{"l":"cps/runtime/WithFilterSubstAsyncShift.html","n":"WithFilterSubstAsyncShift","t":"class WithFilterSubstAsyncShift[A, C <: ([X] =>> Iterable[X] & IterableOps[X, C, C[X]]), CA <: C[A]](ca: CA, p: A => Boolean, csf: IterableOpsAsyncShift[A, C, CA])","d":"cps/runtime/WithFilterSubstAsyncShift","k":"class"},
{"l":"cps/runtime/WithFilterSubstAsyncShift.html","n":"flatMap","t":"def flatMap[F[_], B](m: CpsMonad[F])(f: A => F[IterableOnce[B]]): F[C[B]]","d":"cps/runtime/WithFilterSubstAsyncShift","k":"def"},
{"l":"cps/runtime/WithFilterSubstAsyncShift.html","n":"foreach","t":"def foreach[F[_], U](m: CpsMonad[F])(f: A => F[U]): F[Unit]","d":"cps/runtime/WithFilterSubstAsyncShift","k":"def"},
{"l":"cps/runtime/WithFilterSubstAsyncShift.html","n":"map","t":"def map[F[_], B](m: CpsMonad[F])(f: A => F[B]): F[C[B]]","d":"cps/runtime/WithFilterSubstAsyncShift","k":"def"},
{"l":"cps/runtime/WithFilterSubstAsyncShift.html","n":"withFilter","t":"def withFilter[F[_]](m: CpsMonad[F])(p1: A => F[Boolean]): DelayedWithFilter[F, A, C, CA]","d":"cps/runtime/WithFilterSubstAsyncShift","k":"def"},
{"l":"cps/runtime/util.html","n":"cps.runtime.util","t":"package cps.runtime.util","d":"cps/runtime/util","k":"package"},
{"l":"cps/runtime/util/EitherAsyncShift.html","n":"EitherAsyncShift","t":"class EitherAsyncShift[A, B] extends AsyncShift[Either[A, B]]","d":"cps/runtime/util/EitherAsyncShift","k":"class"},
{"l":"cps/runtime/util/EitherAsyncShift.html","n":"exists","t":"def exists[F[_]](o: Either[A, B], m: CpsMonad[F])(p: B => F[Boolean]): F[Boolean]","d":"cps/runtime/util/EitherAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherAsyncShift.html","n":"filterOrElse","t":"def filterOrElse[F[_], A1 >: A](o: Either[A, B], m: CpsMonad[F])(p: B => F[Boolean], zero: () => F[A1]): F[Either[A1, B]]","d":"cps/runtime/util/EitherAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherAsyncShift.html","n":"flatMap","t":"def flatMap[F[_], A1 >: A, B1](o: Either[A, B], m: CpsMonad[F])(f: B => F[Either[A1, B1]]): F[Either[A1, B1]]","d":"cps/runtime/util/EitherAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherAsyncShift.html","n":"fold","t":"def fold[F[_], C](o: Either[A, B], m: CpsMonad[F])(fa: A => F[C], fb: B => F[C]): F[C]","d":"cps/runtime/util/EitherAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherAsyncShift.html","n":"forall","t":"def forall[F[_]](o: Either[A, B], m: CpsMonad[F])(p: B => F[Boolean]): F[Boolean]","d":"cps/runtime/util/EitherAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherAsyncShift.html","n":"foreach","t":"def foreach[F[_], U](o: Either[A, B], m: CpsMonad[F])(f: B => F[U]): F[Unit]","d":"cps/runtime/util/EitherAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherAsyncShift.html","n":"getOrElse","t":"def getOrElse[F[_], B1 >: B](o: Either[A, B], m: CpsMonad[F])(default: () => F[B1]): F[B1]","d":"cps/runtime/util/EitherAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherAsyncShift.html","n":"map","t":"def map[F[_], B1](o: Either[A, B], m: CpsMonad[F])(f: B => F[B1]): F[Either[A, B1]]","d":"cps/runtime/util/EitherAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherAsyncShift.html","n":"orElse","t":"def orElse[F[_], A1 >: A, B1 >: B](o: Either[A, B], m: CpsMonad[F])(default: () => F[Either[A1, B1]]): F[Either[A1, B1]]","d":"cps/runtime/util/EitherAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherLeftProjectionAsyncShift.html","n":"EitherLeftProjectionAsyncShift","t":"class EitherLeftProjectionAsyncShift[A, B] extends AsyncShift[LeftProjection[A, B]]","d":"cps/runtime/util/EitherLeftProjectionAsyncShift","k":"class"},
{"l":"cps/runtime/util/EitherLeftProjectionAsyncShift.html","n":"exists","t":"def exists[F[_]](o: LeftProjection[A, B], m: CpsMonad[F])(p: A => F[Boolean]): F[Boolean]","d":"cps/runtime/util/EitherLeftProjectionAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherLeftProjectionAsyncShift.html","n":"filterToOption","t":"def filterToOption[F[_], B1](o: LeftProjection[A, B], m: CpsMonad[F])(p: A => F[Boolean]): F[Option[Either[A, B1]]]","d":"cps/runtime/util/EitherLeftProjectionAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherLeftProjectionAsyncShift.html","n":"flatMap","t":"def flatMap[F[_], A1, B1 >: B](o: LeftProjection[A, B], m: CpsMonad[F])(f: A => F[Either[A1, B1]]): F[Either[A1, B1]]","d":"cps/runtime/util/EitherLeftProjectionAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherLeftProjectionAsyncShift.html","n":"forall","t":"def forall[F[_]](o: LeftProjection[A, B], m: CpsMonad[F])(p: A => F[Boolean]): F[Boolean]","d":"cps/runtime/util/EitherLeftProjectionAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherLeftProjectionAsyncShift.html","n":"foreach","t":"def foreach[F[_], U](o: LeftProjection[A, B], m: CpsMonad[F])(f: A => F[U]): F[Unit]","d":"cps/runtime/util/EitherLeftProjectionAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherLeftProjectionAsyncShift.html","n":"getOrElse","t":"def getOrElse[F[_], A1 >: A](o: LeftProjection[A, B], m: CpsMonad[F])(default: () => F[A1]): F[A1]","d":"cps/runtime/util/EitherLeftProjectionAsyncShift","k":"def"},
{"l":"cps/runtime/util/EitherLeftProjectionAsyncShift.html","n":"map","t":"def map[F[_], A1](o: LeftProjection[A, B], m: CpsMonad[F])(f: A => F[A1]): F[Either[A1, B]]","d":"cps/runtime/util/EitherLeftProjectionAsyncShift","k":"def"},
{"l":"cps/runtime/util/TryAsyncShift.html","n":"TryAsyncShift","t":"class TryAsyncShift[T] extends AsyncShift[Try[T]]","d":"cps/runtime/util/TryAsyncShift","k":"class"},
{"l":"cps/runtime/util/TryAsyncShift.html","n":"filter","t":"def filter[F[_]](o: Try[T], m: CpsMonad[F])(p: T => F[Boolean]): F[Try[T]]","d":"cps/runtime/util/TryAsyncShift","k":"def"},
{"l":"cps/runtime/util/TryAsyncShift.html","n":"flatMap","t":"def flatMap[F[_], U](o: Try[T], m: CpsMonad[F])(f: T => F[Try[U]]): F[Try[U]]","d":"cps/runtime/util/TryAsyncShift","k":"def"},
{"l":"cps/runtime/util/TryAsyncShift.html","n":"fold","t":"def fold[F[_], U](o: Try[T], m: CpsMonad[F])(fa: Throwable => F[U], fb: T => F[U]): F[U]","d":"cps/runtime/util/TryAsyncShift","k":"def"},
{"l":"cps/runtime/util/TryAsyncShift.html","n":"foreach","t":"def foreach[F[_], U](o: Try[T], m: CpsMonad[F])(f: T => F[U]): F[Unit]","d":"cps/runtime/util/TryAsyncShift","k":"def"},
{"l":"cps/runtime/util/TryAsyncShift.html","n":"getOrElse","t":"def getOrElse[F[_], U >: T](o: Try[T], m: CpsMonad[F])(default: () => F[U]): F[U]","d":"cps/runtime/util/TryAsyncShift","k":"def"},
{"l":"cps/runtime/util/TryAsyncShift.html","n":"map","t":"def map[F[_], U](o: Try[T], m: CpsMonad[F])(f: T => F[U]): F[Try[U]]","d":"cps/runtime/util/TryAsyncShift","k":"def"},
{"l":"cps/runtime/util/TryAsyncShift.html","n":"orElse","t":"def orElse[F[_], U >: T](o: Try[T], m: CpsMonad[F])(default: () => F[Try[U]]): F[Try[U]]","d":"cps/runtime/util/TryAsyncShift","k":"def"},
{"l":"cps/runtime/util/TryAsyncShift.html","n":"recover","t":"def recover[F[_], U >: T](o: Try[T], m: CpsMonad[F])(pf: PartialFunction[Throwable, F[U]]): F[Try[U]]","d":"cps/runtime/util/TryAsyncShift","k":"def"},
{"l":"cps/runtime/util/TryAsyncShift.html","n":"recoverWith","t":"def recoverWith[F[_], U >: T](o: Try[T], m: CpsMonad[F])(pf: PartialFunction[Throwable, F[Try[U]]]): F[Try[U]]","d":"cps/runtime/util/TryAsyncShift","k":"def"},
{"l":"cps/runtime/util/TryModuleAsyncShift$.html","n":"TryModuleAsyncShift","t":"object TryModuleAsyncShift extends AsyncShift[Try.type]","d":"cps/runtime/util/TryModuleAsyncShift$","k":"object"},
{"l":"cps/runtime/util/TryModuleAsyncShift$.html","n":"apply","t":"def apply[F[_], T](o: Try.type, m: CpsTryMonad[F])(r: () => F[T]): F[Try[T]]","d":"cps/runtime/util/TryModuleAsyncShift$","k":"def"},
{"l":"cps/runtime/util/UsingAsyncShift$.html","n":"UsingAsyncShift","t":"object UsingAsyncShift extends AsyncShift[Using.type]","d":"cps/runtime/util/UsingAsyncShift$","k":"object"},
{"l":"cps/runtime/util/UsingAsyncShift$.html","n":"apply","t":"def apply[F[_], R, A](o: Using.type, m: CpsTryMonad[F])(resource: () => F[R])(f: R => F[A])(implicit arg0: Releasable[R]): F[Try[A]]","d":"cps/runtime/util/UsingAsyncShift$","k":"def"},
{"l":"cps/runtime/util/UsingAsyncShift$.html","n":"resource","t":"def resource[F[_], R, A](o: Using.type, m: CpsTryMonad[F])(r: R)(f: R => F[A])(implicit arg0: Releasable[R]): F[A]","d":"cps/runtime/util/UsingAsyncShift$","k":"def"},
{"l":"cps/runtime/util/UsingAsyncShift$.html","n":"resources","t":"def resources[F[_], R1, R2, A](o: Using.type, m: CpsTryMonad[F])(r1: R1, r2: () => F[R2])(f: (R1, R2) => F[A])(implicit r1Releasable: Releasable[R1], r2Releasable: Releasable[R2]): F[A]","d":"cps/runtime/util/UsingAsyncShift$","k":"def"},
{"l":"cps/runtime/util/UsingAsyncShift$.html","n":"resources","t":"def resources[F[_], R1, R2, R3, A](o: Using.type, m: CpsTryMonad[F])(r1: R1, r2: () => F[R2], r3: () => F[R3])(f: (R1, R2, R3) => F[A])(implicit r1Releasable: Releasable[R1], r2Releasable: Releasable[R2], r3Releasable: Releasable[R3]): F[A]","d":"cps/runtime/util/UsingAsyncShift$","k":"def"},
{"l":"cps/runtime/util/UsingAsyncShift$.html","n":"resources","t":"def resources[F[_], R1, R2, R3, R4, A](o: Using.type, m: CpsTryMonad[F])(r1: R1, r2: () => F[R2], r3: () => F[R3], r4: () => F[R4])(f: (R1, R2, R3, R4) => F[A])(implicit r1Rl: Releasable[R1], r2Rl: Releasable[R2], r3Rl: Releasable[R3], r4Rl: Releasable[R4]): F[A]","d":"cps/runtime/util/UsingAsyncShift$","k":"def"},
{"l":"cps/stream.html","n":"cps.stream","t":"package cps.stream","d":"cps/stream","k":"package"},
{"l":"cps/stream/AsyncIterator.html","n":"AsyncIterator","t":"trait AsyncIterator[F[_], T]","d":"cps/stream/AsyncIterator","k":"trait"},
{"l":"cps/stream/AsyncIterator.html","n":"next","t":"def next: F[Option[T]]","d":"cps/stream/AsyncIterator","k":"def"},
{"l":"cps/stream/AsyncIterator$.html","n":"AsyncIterator","t":"object AsyncIterator","d":"cps/stream/AsyncIterator$","k":"object"},
{"l":"cps/stream/AsyncIterator$.html","n":"absorber","t":"given absorber[F[_], C <: CpsMonadContext[F], T](using ExecutionContext, Aux[F, C]): CpsAsyncEmitAbsorber4[AsyncIterator[F, T], F, C, T]","d":"cps/stream/AsyncIterator$","k":"given"},
{"l":"cps/stream/AsyncIterator$.html","n":"unfold","t":"def unfold[S, F[_] : CpsConcurrentMonad, T](s0: S)(f: S => F[Option[(T, S)]]): AsyncIterator[F, T]","d":"cps/stream/AsyncIterator$","k":"def"},
{"l":"cps/stream/AsyncIteratorEmitAbsorber.html","n":"AsyncIteratorEmitAbsorber","t":"class AsyncIteratorEmitAbsorber[F[_], C <: CpsMonadContext[F], T](using ec: ExecutionContext, auxAsyncMonad: Aux[F, C]) extends CpsAsyncEmitAbsorber4[AsyncIterator[F, T], F, C, T]","d":"cps/stream/AsyncIteratorEmitAbsorber","k":"class"},
{"l":"cps/stream/AsyncIteratorEmitAbsorber.html","n":"Context","t":"type Context = C","d":"cps/stream/AsyncIteratorEmitAbsorber","k":"type"},
{"l":"cps/stream/AsyncIteratorEmitAbsorber.html","n":"Element","t":"type Element = T","d":"cps/stream/AsyncIteratorEmitAbsorber","k":"type"},
{"l":"cps/stream/AsyncIteratorEmitAbsorber.html","n":"asyncMonad","t":"val asyncMonad: Aux[Monad, Context]","d":"cps/stream/AsyncIteratorEmitAbsorber","k":"val"},
{"l":"cps/stream/AsyncList.html","n":"AsyncList","t":"trait AsyncList[F[_], +T]","d":"cps/stream/AsyncList","k":"trait"},
{"l":"cps/stream/AsyncList.html","n":"append","t":"def append[S >: T](x: => AsyncList[F, S]): AsyncList[F, S]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"appendAsync","t":"def appendAsync[S >: T](x: () => F[AsyncList[F, S]]): AsyncList[F, S]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"filter","t":"def filter(p: T => Boolean): AsyncList[F, T]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"filterAsync","t":"def filterAsync(p: T => F[Boolean]): AsyncList[F, T]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"flatMap","t":"def flatMap[S](f: T => AsyncList[F, S]): AsyncList[F, S]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"fold","t":"def fold[S](s0: S)(f: (S, T) => S): F[S]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"foldAsync","t":"def foldAsync[S](s0: S)(f: (S, T) => F[S]): F[S]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"foreach","t":"def foreach[U](f: T => U): F[Unit]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"foreachAsync","t":"def foreachAsync[U](f: T => F[U]): F[Unit]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"iterator","t":"def iterator: AsyncIterator[F, T]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"map","t":"def map[S](f: T => S): AsyncList[F, S]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"mapAsync","t":"def mapAsync[S](f: T => F[S]): AsyncList[F, S]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"merge","t":"def merge[S >: T](other: AsyncList[F, S]): AsyncList[F, S]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"next","t":"def next: F[Option[(T, AsyncList[F, T])]]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"scan","t":"def scan[S](s0: S)(f: (S, T) => S): AsyncList[F, S]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"scanAsync","t":"def scanAsync[S](s0: S)(f: (S, T) => F[S]): AsyncList[F, S]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"scanTail","t":"def scanTail[S](s0: S)(f: (S, T) => S): AsyncList[F, S]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"scanTailAsync","t":"def scanTailAsync[S](s0: S)(f: (S, T) => F[S]): AsyncList[F, S]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"takeList","t":"def takeList(n: Int): F[List[T]]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"takeListAll","t":"def takeListAll(): F[List[T]]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList.html","n":"takeTo","t":"def takeTo[B <: AbstractBuffer[T]](buffer: B, n: Int): F[B]","d":"cps/stream/AsyncList","k":"def"},
{"l":"cps/stream/AsyncList$.html","n":"AsyncList","t":"object AsyncList","d":"cps/stream/AsyncList$","k":"object"},
{"l":"cps/stream/AsyncList$.html","n":"absorber","t":"given absorber[F[_], C <: CpsMonadContext[F], T](using ExecutionContext, Aux[F, C]): CpsAsyncEmitAbsorber4[AsyncList[F, T], F, C, T]","d":"cps/stream/AsyncList$","k":"given"},
{"l":"cps/stream/AsyncList$.html","n":"empty","t":"def empty[F[_] : CpsConcurrentMonad]: AsyncList[F, Nothing]","d":"cps/stream/AsyncList$","k":"def"},
{"l":"cps/stream/AsyncList$.html","n":"unfold","t":"def unfold[S, F[_] : CpsConcurrentMonad, T](s0: S)(f: S => F[Option[(T, S)]]): AsyncList[F, T]","d":"cps/stream/AsyncList$","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"Cons","t":"class Cons[F[_], T](head: T, tailFun: () => AsyncList[F, T])(implicit evidence$3: CpsConcurrentMonad[F]) extends AsyncList[F, T]","d":"cps/stream/AsyncList$$Cons","k":"class"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"append","t":"def append[S >: T](x: => AsyncList[F, S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"filter","t":"def filter(p: T => Boolean): AsyncList[F, T]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"filterAsync","t":"def filterAsync(p: T => F[Boolean]): AsyncList[F, T]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"flatMap","t":"def flatMap[S](f: T => AsyncList[F, S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"fold","t":"def fold[S](s0: S)(f: (S, T) => S): F[S]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"foldAsync","t":"def foldAsync[S](s0: S)(f: (S, T) => F[S]): F[S]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"map","t":"def map[S](f: T => S): AsyncList[F, S]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"mapAsync","t":"def mapAsync[S](f: T => F[S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"merge","t":"def merge[S >: T](other: AsyncList[F, S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"next","t":"def next: F[Option[(T, AsyncList[F, T])]]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"scanTail","t":"def scanTail[S](s0: S)(f: (S, T) => S): AsyncList[F, S]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"scanTailAsync","t":"def scanTailAsync[S](s0: S)(f: (S, T) => F[S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Cons.html","n":"takeTo","t":"def takeTo[B <: AbstractBuffer[T]](buffer: B, n: Int): F[B]","d":"cps/stream/AsyncList$$Cons","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"Empty","t":"class Empty[F[_]]()(implicit evidence$4: CpsConcurrentMonad[F]) extends AsyncList[F, Nothing]","d":"cps/stream/AsyncList$$Empty","k":"class"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"append","t":"def append[S](x: => AsyncList[F, S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"filter","t":"def filter(p: Nothing => Boolean): Empty[F]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"filterAsync","t":"def filterAsync(p: Nothing => F[Boolean]): Empty[F]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"flatMap","t":"def flatMap[S](f: Nothing => AsyncList[F, S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"fold","t":"def fold[S](s0: S)(f: (S, Nothing) => S): F[S]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"foldAsync","t":"def foldAsync[S](s0: S)(f: (S, Nothing) => F[S]): F[S]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"map","t":"def map[S](f: Nothing => S): AsyncList[F, S]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"mapAsync","t":"def mapAsync[S](f: Nothing => F[S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"merge","t":"def merge[S](other: AsyncList[F, S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"next","t":"def next: F[Option[(Nothing, AsyncList[F, Nothing])]]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"scanTail","t":"def scanTail[S](s0: S)(f: (S, Nothing) => S): AsyncList[F, S]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"scanTailAsync","t":"def scanTailAsync[S](s0: S)(f: (S, Nothing) => F[S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Empty.html","n":"takeTo","t":"def takeTo[B <: AbstractBuffer[Nothing]](buffer: B, n: Int): F[B]","d":"cps/stream/AsyncList$$Empty","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"Wait","t":"class Wait[F[_], T](fs: F[AsyncList[F, T]])(implicit evidence$2: CpsConcurrentMonad[F]) extends AsyncList[F, T]","d":"cps/stream/AsyncList$$Wait","k":"class"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"append","t":"def append[S >: T](x: => AsyncList[F, S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"filter","t":"def filter(p: T => Boolean): AsyncList[F, T]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"filterAsync","t":"def filterAsync(p: T => F[Boolean]): AsyncList[F, T]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"flatMap","t":"def flatMap[S](f: T => AsyncList[F, S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"fold","t":"def fold[S](s0: S)(f: (S, T) => S): F[S]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"foldAsync","t":"def foldAsync[S](s0: S)(f: (S, T) => F[S]): F[S]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"map","t":"def map[S](f: T => S): AsyncList[F, S]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"mapAsync","t":"def mapAsync[S](f: T => F[S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"merge","t":"def merge[S >: T](other: AsyncList[F, S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"next","t":"def next: F[Option[(T, AsyncList[F, T])]]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"scanTail","t":"def scanTail[S](s0: S)(f: (S, T) => S): AsyncList[F, S]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"scanTailAsync","t":"def scanTailAsync[S](s0: S)(f: (S, T) => F[S]): AsyncList[F, S]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncList$$Wait.html","n":"takeTo","t":"def takeTo[B <: AbstractBuffer[T]](buffer: B, n: Int): F[B]","d":"cps/stream/AsyncList$$Wait","k":"def"},
{"l":"cps/stream/AsyncListEmitAbsorber.html","n":"AsyncListEmitAbsorber","t":"class AsyncListEmitAbsorber[F[_], C <: CpsMonadContext[F], T](using ec: ExecutionContext, auxMonad: Aux[F, C]) extends BaseUnfoldCpsAsyncEmitAbsorber[AsyncList[F, T], F, C, T]","d":"cps/stream/AsyncListEmitAbsorber","k":"class"},
{"l":"cps/stream/AsyncListEmitAbsorber.html","n":"Element","t":"type Element = T","d":"cps/stream/AsyncListEmitAbsorber","k":"type"},
{"l":"cps/stream/AsyncListEmitAbsorber.html","n":"asSync","t":"def asSync(fs: F[AsyncList[F, T]]): AsyncList[F, T]","d":"cps/stream/AsyncListEmitAbsorber","k":"def"},
{"l":"cps/stream/AsyncListEmitAbsorber.html","n":"unfold","t":"def unfold[S](s0: S)(f: S => F[Option[(T, S)]]): AsyncList[F, T]","d":"cps/stream/AsyncListEmitAbsorber","k":"def"},
{"l":"cps/stream/AsyncListIterator.html","n":"AsyncListIterator","t":"class AsyncListIterator[F[_], T](l: AsyncList[F, T])(implicit evidence$1: CpsConcurrentMonad[F]) extends AsyncIterator[F, T]","d":"cps/stream/AsyncListIterator","k":"class"},
{"l":"cps/stream/AsyncListIterator.html","n":"next","t":"def next: F[Option[T]]","d":"cps/stream/AsyncListIterator","k":"def"},
{"l":"cps/stream/AsyncListIterator.html","n":"ref","t":"val ref: AtomicReference[AsyncList[F, T]]","d":"cps/stream/AsyncListIterator","k":"val"},
{"l":"cps/stream/AsyncStreamHelper.html","n":"AsyncStreamHelper","t":"class AsyncStreamHelper[R, F[_], C <: CpsMonadContext[F], A](a: Aux[R, F, C, A])","d":"cps/stream/AsyncStreamHelper","k":"class"},
{"l":"cps/stream/AsyncStreamHelper.html","n":"apply","t":"def apply(inline f: C => CpsAsyncEmitter[F, A] => Unit): R","d":"cps/stream/AsyncStreamHelper","k":"def"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber.html","n":"BaseUnfoldCpsAsyncEmitAbsorber","t":"trait BaseUnfoldCpsAsyncEmitAbsorber[R, F[_], C <: CpsMonadContext[F], T](using val ex: ExecutionContext, val asyncMonad: Aux[F, C]) extends CpsAsyncEmitAbsorber4[R, F, C, T]","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber","k":"trait"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber.html","n":"ConsumerCallback","t":"type ConsumerCallback = Try[SupplyEventRecord] => Unit","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber","k":"type"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber.html","n":"OneThreadTaskCallback","t":"type OneThreadTaskCallback = Unit => Unit","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber","k":"type"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber.html","n":"asSync","t":"def asSync(fs: F[R]): R","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber","k":"def"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber.html","n":"asyncMonad","t":"given asyncMonad: Aux[F, C]","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber","k":"given"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber.html","n":"eval","t":"def eval(f: C => CpsAsyncEmitter[Monad, Element] => F[Unit]): R","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber","k":"def"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber.html","n":"evalAsync","t":"def evalAsync(f: C => CpsAsyncEmitter[F, T] => F[Unit]): F[R]","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber","k":"def"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber.html","n":"evalAsyncInternal","t":"def evalAsyncInternal(f: CpsAsyncEmitter[F, T] => F[Unit]): R","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber","k":"def"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber.html","n":"ex","t":"given ex: ExecutionContext","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber","k":"given"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber.html","n":"unfold","t":"def unfold[S](s0: S)(f: S => F[Option[(T, S)]]): R","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber","k":"def"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$Emitted.html","n":"Emitted","t":"class Emitted(value: T, emitPromise: Promise[Unit]) extends SupplyEventRecord","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$Emitted","k":"class"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$Finished.html","n":"Finished","t":"class Finished(result: Try[Unit]) extends SupplyEventRecord","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$Finished","k":"class"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$SpawnEmitter$.html","n":"SpawnEmitter","t":"object SpawnEmitter extends SupplyEventRecord","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$SpawnEmitter$","k":"object"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State.html","n":"State","t":"class State","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State","k":"class"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State.html","n":"StageBusy","t":"val StageBusy: 1","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State","k":"val"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State.html","n":"StageContinue","t":"val StageContinue: 3","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State","k":"val"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State.html","n":"StageFree","t":"val StageFree: 0","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State","k":"val"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State.html","n":"consumerEvents","t":"val consumerEvents: ConcurrentLinkedDeque[Promise[SupplyEventRecord]]","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State","k":"val"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State.html","n":"emitStart","t":"val emitStart: AtomicBoolean","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State","k":"val"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State.html","n":"finish","t":"def finish(r: Try[Unit]): Unit","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State","k":"def"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State.html","n":"finishRef","t":"val finishRef: AtomicReference[Try[Unit] | Null]","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State","k":"val"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State.html","n":"queueConsumer","t":"def queueConsumer(): F[SupplyEventRecord]","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State","k":"def"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State.html","n":"queueEmit","t":"def queueEmit(v: T): F[Unit]","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State","k":"def"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State.html","n":"stepStage","t":"val stepStage: AtomicInteger","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State","k":"val"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State.html","n":"supplyEvents","t":"val supplyEvents: ConcurrentLinkedDeque[SupplyEventRecord]","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$State","k":"val"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$StepsObserver.html","n":"StepsObserver","t":"class StepsObserver(state: State) extends CpsAsyncEmitter[F, T]","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$StepsObserver","k":"class"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$StepsObserver.html","n":"emitAsync","t":"def emitAsync(v: T): F[Unit]","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$StepsObserver","k":"def"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$StepsObserver.html","n":"finish","t":"def finish(r: Try[Unit]): Unit","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$StepsObserver","k":"def"},
{"l":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$SupplyEventRecord.html","n":"SupplyEventRecord","t":"class SupplyEventRecord","d":"cps/stream/BaseUnfoldCpsAsyncEmitAbsorber$SupplyEventRecord","k":"class"},
{"l":"cps/stream/CpsAsyncEmitAbsorber.html","n":"CpsAsyncEmitAbsorber","t":"trait CpsAsyncEmitAbsorber[R]","d":"cps/stream/CpsAsyncEmitAbsorber","k":"trait"},
{"l":"cps/stream/CpsAsyncEmitAbsorber.html","n":"Context","t":"type Context <: CpsMonadContext[Monad]","d":"cps/stream/CpsAsyncEmitAbsorber","k":"type"},
{"l":"cps/stream/CpsAsyncEmitAbsorber.html","n":"Element","t":"type Element","d":"cps/stream/CpsAsyncEmitAbsorber","k":"type"},
{"l":"cps/stream/CpsAsyncEmitAbsorber.html","n":"Monad","t":"type Monad[_]","d":"cps/stream/CpsAsyncEmitAbsorber","k":"type"},
{"l":"cps/stream/CpsAsyncEmitAbsorber.html","n":"asyncMonad","t":"def asyncMonad: Aux[Monad, Context]","d":"cps/stream/CpsAsyncEmitAbsorber","k":"def"},
{"l":"cps/stream/CpsAsyncEmitAbsorber.html","n":"eval","t":"def eval(f: Context => CpsAsyncEmitter[Monad, Element] => Monad[Unit]): R","d":"cps/stream/CpsAsyncEmitAbsorber","k":"def"},
{"l":"cps/stream/CpsAsyncEmitAbsorber$.html","n":"CpsAsyncEmitAbsorber","t":"object CpsAsyncEmitAbsorber","d":"cps/stream/CpsAsyncEmitAbsorber$","k":"object"},
{"l":"cps/stream/CpsAsyncEmitAbsorber$.html","n":"Aux","t":"type Aux[R, F[_], C <: CpsMonadContext[F], T] = CpsAsyncEmitAbsorber[R] { type Monad = F; type Context = C; type Element = T;  }","d":"cps/stream/CpsAsyncEmitAbsorber$","k":"type"},
{"l":"cps/stream/CpsAsyncEmitAbsorber4.html","n":"CpsAsyncEmitAbsorber4","t":"trait CpsAsyncEmitAbsorber4[R, F[_], C <: CpsMonadContext[F], T](using val auxAsyncMonad: Aux[F, C]) extends CpsAsyncEmitAbsorber[R]","d":"cps/stream/CpsAsyncEmitAbsorber4","k":"trait"},
{"l":"cps/stream/CpsAsyncEmitAbsorber4.html","n":"Context","t":"type Context = C","d":"cps/stream/CpsAsyncEmitAbsorber4","k":"type"},
{"l":"cps/stream/CpsAsyncEmitAbsorber4.html","n":"Element","t":"type Element = T","d":"cps/stream/CpsAsyncEmitAbsorber4","k":"type"},
{"l":"cps/stream/CpsAsyncEmitAbsorber4.html","n":"Monad","t":"type Monad[X] = F[X]","d":"cps/stream/CpsAsyncEmitAbsorber4","k":"type"},
{"l":"cps/stream/CpsAsyncEmitAbsorber4.html","n":"auxAsyncMonad","t":"given auxAsyncMonad: Aux[F, C]","d":"cps/stream/CpsAsyncEmitAbsorber4","k":"given"},
{"l":"cps/stream/CpsAsyncEmitter.html","n":"CpsAsyncEmitter","t":"trait CpsAsyncEmitter[F[_], E]","d":"cps/stream/CpsAsyncEmitter","k":"trait"},
{"l":"cps/stream/CpsAsyncEmitter.html","n":"emit","t":"def emit(v: E)(using CpsMonadContext[F]): Unit","d":"cps/stream/CpsAsyncEmitter","k":"def"},
{"l":"cps/stream/CpsAsyncEmitter.html","n":"emitAsync","t":"def emitAsync(v: E): F[Unit]","d":"cps/stream/CpsAsyncEmitter","k":"def"},
{"l":"cps/stream/CpsAsyncStreamMacro$.html","n":"CpsAsyncStreamMacro","t":"object CpsAsyncStreamMacro","d":"cps/stream/CpsAsyncStreamMacro$","k":"object"},
{"l":"cps/stream/CpsAsyncStreamMacro$.html","n":"insideLambda","t":"def insideLambda(using qctx: Quotes)(f: Term, op: (ValDef, Term) => Term): Term","d":"cps/stream/CpsAsyncStreamMacro$","k":"def"},
{"l":"cps/stream/CpsAsyncStreamMacro$.html","n":"transform","t":"def transform[R : Type, F[_] : Type, C <: CpsMonadContext[F] : Type, T : Type](f: Expr[C => CpsAsyncEmitter[F, T] => Unit], absorber: Expr[Aux[R, F, C, T]])(implicit evidence$2: Type[R], evidence$3: Type[F], evidence$4: Type[C], evidence$5: Type[T], Quotes): Expr[R]","d":"cps/stream/CpsAsyncStreamMacro$","k":"def"},
{"l":"cps/stream/CpsAsyncStreamMacro$.html","n":"transformTree","t":"def transformTree[R : Type, F[_] : Type, C <: CpsMonadContext[F] : Type, T : Type](using qctx: Quotes)(f: Term, absorber: Expr[Aux[R, F, C, T]]): Term","d":"cps/stream/CpsAsyncStreamMacro$","k":"def"},
{"l":"cps/syntax.html","n":"cps.syntax","t":"package cps.syntax","d":"cps/syntax","k":"package"},
{"l":"cps/syntax.html","n":"flatMap","t":"def flatMap(using m: CpsMonad[F])(f: T => F[S]): F[S]","d":"cps/syntax","k":"def"},
{"l":"cps/syntax.html","n":"map","t":"def map(using m: CpsMonad[F])(f: T => S): F[S]","d":"cps/syntax","k":"def"},
{"l":"cps/syntax.html","n":"unary_!","t":"def unary_!(using CpsAwaitable[F], CpsMonadContext[G]): T","d":"cps/syntax","k":"def"},
{"l":"docs/index.html","n":"root","t":"root","d":"","k":"static"}];